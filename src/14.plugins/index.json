{
	"Vue Global API - use(plugin)": {
		"prefix": "Vue.use()_UNSAFE",
		"body": [
			"Vue.use(${1:plugin});$0"
		],
		"description": "Arguments: `{Object | Function} plugin.`\nInstall a Vue.js plugin. If the plugin is an Object, it must expose an install method. If it is a function itself, it will be treated as the install method. The install method will be called with Vue as the argument.\nThis method has to be called before calling `new Vue()`\nWhen this method is called on the same plugin multiple times, the plugin will be installed only once.\nPlugins usually add global-level functionality to Vue. There is no strictly defined scope for a plugin - there are typically several types of plugins:\n 1. Add some global methods or properties. e.g. vue-custom-element\n 2. Add one or more global assets: directives/filters/transitions etc. e.g. vue-touch\n 3. Add some component options by global mixin. e.g. vue-router\n 4. Add some Vue instance methods by attaching them to Vue.prototype.\n 5. A library that provides an API of its own, while at the same time injecting some combination of the above. e.g. vue-router\nVue 3.x removed. (3.x Instance API: app.use)\n"
	},
	"Vue Plugins (Component)": {
		"prefix": "vue-plugin",
		"body": [
			"import Feature from './src/main';",
			"$0",
			"/* istanbul ignore next */",
			"Feature.install = (Vue, options = {}) => {",
			"  Vue.component(Feature.name, Feature);",
			"};",
			"",
			"export default Feature;"
		]
	},
	"Vue Plugins (Components)": {
		"prefix": "vue-plugin",
		"body": [
			"import Feature from './src/main';",
			"$0",
			"const components = [Feature];",
			"",
			"const install = (Vue, options = {}) => {",
			"  components.forEach((component) => {",
			"    Vue.component(component.name, component);",
			"  });",
			"};",
			"",
			"function autoInstall() {",
			"  let GlobalVue = null;",
			"",
			"  if (typeof window !== 'undefined') {",
			"    GlobalVue = window.Vue;",
			"  } else if (typeof globalThis !== 'undefined') {",
			"    // eslint-disable-next-line no-undef",
			"    GlobalVue = globalThis.Vue;",
			"  }",
			"",
			"  if (GlobalVue) {",
			"    install(GlobalVue);",
			"  }",
			"}",
			"",
			"autoInstall();",
			"",
			"export default {",
			"  version: '1.0.0',",
			"  install,",
			"  Feature,",
			"};"
		]
	},
	"Vue Plugins, add an instance method": {
		"prefix": "Vue.prototype_UNSAFE",
		"body": [
			"Vue.prototype.\\$${1:method} = function (options) {",
			" $2",
			"};"
		]
	}
}
