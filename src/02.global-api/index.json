{
	"Vue Global API: nextTick()": {
		"prefix": "Vue.nextTick()_UNSAFE",
		"body": [
			"Vue.nextTick(function () {",
			"  $0",
			"});"
		],
		"description": "Vue.nextTick( [callback, context] )\nDefer the callback to be executed after the next DOM update cycle. Use it immediately after you’ve changed some data to wait for the DOM update.\nVue 3.x removed.\n"
	},
	"Vue Global API: nextTick().then()": {
		"prefix": "Vue.nextTick().then()_UNSAFE",
		"body": [
			"Vue.nextTick().then(function () {",
			"  $0",
			"});"
		],
		"description": "New in 2.1.0+: returns a Promise if no callback is provided and Promise is supported in the execution environment. Please note that Vue does not come with a Promise polyfill, so if you target browsers that don’t support Promises natively (looking at you, IE), you will have to provide a polyfill yourself.\nVue 3.x removed.\n"
	},
	"Vue Global API: set(target, propertyName/index, value)": {
		"prefix": "Vue.set()_UNSAFE",
		"body": [
			"Vue.set(${1:vm.${2:object/array}}, ${3:propertyName/index}, ${4:value});$0"
		],
		"description": "Adds a property to a reactive object, ensuring the new property is also reactive, so triggers view updates. This must be used to add new properties to reactive objects, as Vue cannot detect normal property additions (e.g. this.`myObject.newProperty = 'hi'`).\nReturns: the set value.\nVue 3.x removed.\n"
	},
	"Vue Global API: delete(target, propertyName/index)": {
		"prefix": "Vue.delete()_UNSAFE",
		"body": [
			"Vue.delete(${1:vm.${2:object/array}}, ${3:propertyName/index}, ${4:value});$0"
		],
		"description": "Delete a property on an object. If the object is reactive, ensure the deletion triggers view updates. This is primarily used to get around the limitation that Vue cannot detect property deletions, but you should rarely need to use it.\nVue 3.x removed.\n"
	},
	"Vue Global API: observable(object)": {
		"prefix": "Vue.observable()_UNSAFE",
		"body": [
			"const ${4:state} = Vue.observable(${1:{ ${2:property}: ${3:value} \\}});$0"
		],
		"description": "Arguments: `{Object} object`.\nMake an object reactive. Internally, Vue uses this on the object returned by the `data` function.\nThe returned object can be used directly inside render functions and computed properties, and will trigger appropriate updates when mutated. It can also be used as a minimal, cross-component state store for simple scenarios.\nVue 3.x replaced by `Vue.reactive`\n"
	},
	"Vue Global API: version": {
		"prefix": "Vue.version",
		"body": ["Vue.version$0"],
		"description": "Provides the installed version of Vue as a string. This is especially useful for community plugins and components, where you might use different strategies for different versions.\n"
	},
	"Vue Global API: compile(template)": {
		"prefix": "Vue.compile()",
		"body": [
			"const ${2:res} = Vue.compile('${1:template}');$0"
		],
		"description": "Arguments: `{string} template`.\nCompiles a template string into a render function. Only available in the full build.\n"
	}
}
