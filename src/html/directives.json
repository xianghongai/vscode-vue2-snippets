{
	"template": {
		"prefix": "template",
		"body": [
			"<template>",
			"  <${1:div}$2>",
			"    $0",
			"  </${1:div}>",
			"</template>"
		],
		"description": "template element.\nIn Vue 2.x, a `<template>` tag could not have a `key`. could place the keys on each of its children.\nIn Vue 3.x, the `key` should be placed on the `<template>` tag instead."
	},
	"functional template": {
		"prefix": "templateFunctional",
		"body": [
			"<template functional>",
			"  <${1:div}$2>",
			"    $0",
			"  </${1:div}>",
			"</template>"
		],
		"description": "template-based functional components"
	},
	"x-template": {
		"prefix": "xtemplate",
		"body": [
			"<script type=\"text/x-template\" id=\"${1:feature}-template\">",
			"  $0",
			"</script>"
		],
		"description": "define templates is inside of a script element with the type text/x-template, then referencing the template by an id."
	},

	"Vue v-for": {
		"prefix": "vFor",
		"body": [
			"v-for=\"(${1:item}, ${2:index}) in ${3:items}\" :key=\"${4:index}\"$0"
		],
		"description": "Expects: `Array | Object | number | string | Iterable (since 2.6)`\nWhen used together with `v-if`, `v-for` has a higher priority than `v-if`.\nRender the element or template block multiple times based on the source data. The directive’s value must use the special syntax `alias in expression` to provide an alias for the current element being iterated on"
	},
	"Vue v-for, Without Key": {
		"prefix": "vForWithoutKey",
		"body": ["v-for=\"${1:item} in ${2:items}\"$0"]
	},
	"Vue v-if": {
		"prefix": "vIf",
		"body": ["v-if=\"${1:condition}\"$0"],
		"description": "Expects: `any`\nWhen used together with `v-if`, `v-for` has a higher priority than `v-if`.\nConditionally render the element based on the truthy-ness of the expression value. The element and its contained directives / components are destroyed and re-constructed during toggles. If the element is a `<template>` element, its content will be extracted as the conditional block.\nThis directive triggers transitions when its condition changes."
	},
	"Vue v-else": {
		"prefix": "vElse",
		"body": ["v-else"],
		"description": "Does not expect expression. \nprevious sibling element must have `v-if` or `v-else-if`.\nDenote the “else block” for `v-if` or a `v-if/v-else-if` chain."
	},
	"Vue v-else-if": {
		"prefix": "vElseIf",
		"body": ["v-else-if=\"${1:condition}\"$0"],
		"description": "previous sibling element must have `v-if` or `v-else-if`.\nDenote the “else if block” for `v-if`. Can be chained."
	},
	"Vue v-if, With Key": {
		"prefix": "vIfWithKey",
		"body": ["v-if=\"${1:condition}\" key=\"{feature}\"$0"],
		"description": "Vue 3.x no longer recommend"
	},
	"Vue v-else, With Key": {
		"prefix": "vElseWithKey",
		"body": ["v-else key=\"{feature}\"$0"],
		"description": "Vue 3.x no longer recommend"
	},
	"Vue v-else-if, With Key": {
		"prefix": "vElseIfWithKey",
		"body": [
			"v-else-if=\"${1:condition}\" key=\"{feature}\"$0"
		],
		"description": "Vue 3.x no longer recommend"
	},
	"Vue v-show": {
		"prefix": "vShow",
		"body": ["v-show=\"${1:condition}\"$0"],
		"description": "Expects: `any`.\nToggles the element’s `display` CSS property based on the truthy-ness of the expression value.\nThis directive triggers transitions when its condition changes."
	},

	"Vue v-text": {
		"prefix": "vText",
		"body": ["v-text=\"${1:text}\"$0"],
		"description": "Expects: `string`.\nUpdates the element’s `textContent`. If you need to update the part of `textContent`, you should use `{{ Mustache }}` interpolations."
	},
	"Vue v-bind filter": {
		"prefix": "vFilter",
		"body": [":text-content.prop=\"text | filter\""]
	},
	"Vue v-html": {
		"prefix": "vHtml",
		"body": ["v-html=\"${1:html}\"$0"],
		"description": "Expects: `string`. \nUpdates the element’s `innerHTML`. Note that the contents are inserted as plain HTML - they will not be compiled as Vue templates. If you find yourself trying to compose templates using `v-html`, try to rethink the solution by using components instead.\nDynamically rendering arbitrary HTML on your website can be very dangerous because it can easily lead to XSS attacks. Only use `v-html` on trusted content and never on user-provided content.\nIn single-file components, `scoped` styles will not apply to content inside `v-html`, because that HTML is not processed by Vue’s template compiler. If you want to target `v-html` content with `scoped` CSS, you can instead use CSS modules or an additional, global `<style>` element with a manual scoping strategy such as BEM."
	},
	"Vue v-model": {
		"prefix": "vModel",
		"body": ["v-model=\"${1:value}\"$0"],
		"description": "Expects: varies based on value of form inputs element or output of components.\nLimited to:\n 1. `<input>`,\n 2. `<select>`,\n 3. `<textarea>`,\n 4. components.\nModifiers:\n 1. `.lazy` - listen to `change` events instead of `input`,\n 2. `.number` - cast valid input string to numbers,\n 3. `.trim` - trim input.\nCreate a two-way binding on a form input element or a component. For detailed usage and other notes, see the Guide section linked below."
	},

	"v-on event/listener": {
		"prefix": "vOn",
		"body": [
			"@${1:click}=\"${2:handler}${3:(${4:arg}, ${5:\\$event})}\"$0"
		],
		"description": "Expects: `Function | Inline Statement | Object`\nModifiers:\n 1. `.stop` - call `event.stopPropagation()`.\n 2. `.prevent` - call `event.preventDefault()`.\n 3. `.capture` - add event listener in capture mode.\n 4. `.self` - only trigger handler if event was dispatched from this element.\n 5. `.{keyCode | keyAlias}` - only trigger handler on certain keys.\n 6. `.native` - listen for a native event on the root element of component. (Vue 3.x has been removed)\n 7. `.once` - trigger handler at most once.\n 8. `.left` - (2.2.0+) only trigger handler for left button mouse events.\n 9. `.right` - (2.2.0+) only trigger handler for right button mouse events.\n 10. `.middle` - (2.2.0+) only trigger handler for middle button mouse events.\n 11. `.passive` - (2.3.0+) attaches a DOM event with `{ passive: true }`.\n"
	},
	"v-on Longhand": {
		"prefix": "vOnLonghand",
		"body": [
			"v-on:${1:click}=\"${2:handler}${3:(${4:arg}, ${5:\\$event})}\"$0"
		],
		"description": "Expects: `Function | Inline Statement | Object`\nModifiers:\n 1. `.stop` - call `event.stopPropagation()`.\n 2. `.prevent` - call `event.preventDefault()`.\n 3. `.capture` - add event listener in capture mode.\n 4. `.self` - only trigger handler if event was dispatched from this element.\n 5. `.{keyCode | keyAlias}` - only trigger handler on certain keys.\n 6. `.native` - listen for a native event on the root element of component. (Vue 3.x has been removed)\n 7. `.once` - trigger handler at most once.\n 8. `.left` - (2.2.0+) only trigger handler for left button mouse events.\n 9. `.right` - (2.2.0+) only trigger handler for right button mouse events.\n 10. `.middle` - (2.2.0+) only trigger handler for middle button mouse events.\n 11. `.passive` - (2.3.0+) attaches a DOM event with `{ passive: true }`.\n"
	},
	"v-on dynamic event": {
		"prefix": "vOnDynamic",
		"body": [
			"@[${1:event}]=\"${2:handler}${3:(${4:arg}, ${5:\\$event})}\"$0"
		],
		"description": "binding dynamic event (2.6.0+)"
	},
	"v-on stop propagation": {
		"prefix": "vOnStopPropagation",
		"body": [
			"@${1:click}.stop=\"${2:handler}${3:(${4:arg}, ${5:\\$event})}\"$0"
		],
		"description": "stop propagation"
	},
	"v-on prevent default": {
		"prefix": "vOnPreventDefault",
		"body": [
			"@${1:click}.prevent=\"${2:handler}${3:(${4:arg}, ${5:\\$event})}\"$0"
		],
		"description": "prevent default"
	},
	"v-on stop propagation and prevent default": {
		"prefix": "vOnStopPropagationPreventDefault",
		"body": [
			"@${1:click}.stop.prevent=\"${2:handler}${3:(${4:arg}, ${5:\\$event})}\"$0"
		],
		"description": "stop propagation and prevent default"
	},
	"v-on key modifier using keyAlias": {
		"prefix": "vOnKeyAlias",
		"body": [
			"@${1:keyup}.${2:enter}=\"${3:handler}${4:(${5:arg}, ${6:\\$event})}\"$0"
		],
		"description": "key modifier using keyAlias"
	},
	"v-on key modifier using keyCode": {
		"prefix": "vOnKeyCode_UNSAFE",
		"body": [
			"@${1:keyup}.${2:13}=\"${3:handler}${4:(${5:arg}, ${6:\\$event})}\"$0"
		],
		"description": "key modifier using keyCode"
	},
	"v-on triggered at most once": {
		"prefix": "vOnOnce",
		"body": [
			"@${1:click}.once=\"${2:handler}${3:(${4:arg}, ${5:\\$event})}\"$0"
		],
		"description": "the event will be triggered at most once"
	},
	"v-on object syntax": {
		"prefix": "vOnObject",
		"body": [
			"v-on=\"{ ${1:mousedown}: ${2:handler}${3:(${4:arg}, ${5:\\$event})}, ${6:mouseup}: ${7:handler}${8:(${9:arg}, ${10:\\$event})} }\"$0"
		],
		"description": "object syntax (2.4.0+)"
	},
	"Vue v-bind": {
		"prefix": "vBind",
		"body": [":${1:attribute}=\"${2:value}\"$0"],
		"description": "Expects: `any (with argument) | Object (without argument)`.\nArgument: `attrOrProp (optional)`\nModifiers:\n 1. `.prop` - Bind as a DOM property instead of an attribute (what’s the difference?). If the tag is a component then `.prop` will set the property on the component’s `$el`.\n 2. `.camel` - (2.1.0+) transform the kebab-case attribute name into camelCase.\n 3. `.sync` - (2.3.0+) a syntax sugar that expands into a `v-on` handler for updating the bound value.\n\n`.camel` is not needed if you are using string templates, or compiling with vue-loader/vueify."
	},
	"Vue v-bind Longhand": {
		"prefix": "vBindLonghand",
		"body": ["v-bind:${1:attribute}=\"${2:value}\"$0"],
		"description": "Expects: `any (with argument) | Object (without argument)`.\nArgument: `attrOrProp (optional)`\nModifiers:\n 1. `.prop` - Bind as a DOM property instead of an attribute (what’s the difference?). If the tag is a component then `.prop` will set the property on the component’s `$el`.\n 2. `.camel` - (2.1.0+) transform the kebab-case attribute name into camelCase.\n 3. `.sync` - (2.3.0+) a syntax sugar that expands into a `v-on` handler for updating the bound value."
	},
	"Vue v-bind dynamic directive": {
		"prefix": "vBindDynamic",
		"body": [":[${1:attribute}]=\"${2:value}\"$0"],
		"description": "Expects: any (with argument) | Object (without argument).\nVue v-bind Directive"
	},
	"Vue v-bind $attrs": {
		"prefix": "vAttrs",
		"body": ["v-bind=\"\\$attrs\"$0"],
		"description": "`inheritAttrs: false` combination with the `$attrs` instance property, which contains the attribute names and values passed to a component."
	},

	"Vue v-once": {
		"prefix": "vOnce",
		"body": ["v-once $0"],
		"description": "Render the element and component once only. On subsequent re-renders, the element/component and all its children will be treated as static content and skipped. This can be used to optimize update performance.\nDoes not expect expression."
	},
	"Vue v-pre": {
		"prefix": "vPre",
		"body": ["v-pre $0"],
		"description": "Skip compilation for this element and all its children. You can use this for displaying raw mustache tags. Skipping large numbers of nodes with no directives on them can also speed up compilation.\nDoes not expect expression."
	},

	"Vue v-cloak": {
		"prefix": "vCloak",
		"body": ["v-cloak $0"],
		"description": "This directive will remain on the element until the associated Vue instance finishes compilation. Combined with CSS rules such as `[v-cloak] { display: none }`, this directive can be used to hide un-compiled mustache bindings until the Vue instance is ready.\nDoes not expect expression."
	}
}
