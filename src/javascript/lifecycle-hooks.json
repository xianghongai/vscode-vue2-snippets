{
	"The Full Lifecycle Hooks": {
		"prefix": "vlh",
		"body": [
			"beforeCreate(this) {},",
			"created() {},",
			"beforeMount() {},",
			"mounted() {},",
			"beforeUpdate() {},",
			"updated() {},",
			"beforeDestroy() {},",
			"destroyed() {},",
			"activated() {},",
			"deactivated() {},",
			"errorCaptured(err, vm, info) {},",
			"serverPrefetch() {},"
		],
		"description": "The Full Lifecycle Hooks"
	},

	"Lifecycle Hooks: beforeCreate()": {
		"prefix": ["lifecycleBeforeCreate", "option.beforeCreate()", "vlh.beforeCreate()"],
		"body": ["beforeCreate() {", "\t$1", "},$0"],
		"description": "Called synchronously immediately after the instance has been initialized, before data observation and event/watcher setup."
	},
	"Lifecycle Hooks: created()": {
		"prefix": ["lifecycleCreated", "option.created()", "vlh.created()"],
		"body": ["created() {", "\t$1", "},$0"],
		"description": "Called synchronously after the instance is created. At this stage, the instance has finished processing the options which means the following have been set up: data observation, computed properties, methods, watch/event callbacks. However, the mounting phase has not been started, and the $el property will not be available yet."
	},
	"Lifecycle Hooks: beforeMount()": {
		"prefix": ["lifecycleBeforeMount", "option.beforeMount()", "vlh.beforeMount()"],
		"body": ["beforeMount() {", "\t$1", "},$0"],
		"description": "Called right before the mounting begins: the render function is about to be called for the first time.\nThis hook is not called during server-side rendering."
	},
	"Lifecycle Hooks: mounted()": {
		"prefix": ["lifecycleMounted", "option.mounted()", "vlh.mounted()"],
		"body": ["mounted() {", "\t$1", "},$0"],
		"description": "Called after the instance has been mounted, where `el` is replaced by the newly created `vm.$el`. If the root instance is mounted to an in-document element, `vm.$el` will also be in-document when `mounted` is called.\nNote that `mounted` does not guarantee that all child components have also been mounted. If you want to wait until the entire view has been rendered, you can use `vm.$nextTick` inside of mounted.\nThis hook is not called during server-side rendering."
	},
	"Lifecycle Hooks: beforeUpdate()": {
		"prefix": ["lifecycleBeforeUpdate", "option.beforeUpdate()", "vlh.beforeUpdate()"],
		"body": ["beforeUpdate() {", "\t$1", "},$0"],
		"description": "Called when data changes, before the DOM is patched. This is a good place to access the existing DOM before an update, e.g. to remove manually added event listeners.\nThis hook is not called during server-side rendering, because only the initial render is performed server-side.\nThis hook is not called during server-side rendering, because only the initial render is performed server-side."
	},
	"Lifecycle Hooks: updated()": {
		"prefix": ["lifecycleUpdated", "option.updated()", "vlh.updated()"],
		"body": ["updated() {", "\t$1", "},$0"],
		"description": "Called after a data change causes the virtual DOM to be re-rendered and patched.\nThe component’s DOM will have been updated when this hook is called, so you can perform DOM-dependent operations here. However, in most cases you should avoid changing state inside the hook. To react to state changes, it’s usually better to use a computed property or watcher instead.\nNote that updated does not guarantee that all child components have also been re-rendered. If you want to wait until the entire view has been re-rendered, you can use vm.$nextTick inside of updated.\nThis hook is not called during server-side rendering."
	},
	"Lifecycle Hooks: activated()": {
		"prefix": ["lifecycleActivated", "option.activated()", "vlh.activated()"],
		"body": ["activated() {", "\t$1", "},$0"],
		"description": "Called when a kept-alive component is activated.\nThis hook is not called during server-side rendering."
	},
	"Lifecycle Hooks: deactivated()": {
		"prefix": ["lifecycleDeactivated", "option.deactivated()", "vlh.deactivated()"],
		"body": ["deactivated() {", "\t$1", "},$0"],
		"description": "Called when a kept-alive component is deactivated.\nThis hook is not called during server-side rendering."
	},
	"Lifecycle Hooks: beforeDestroy()": {
		"prefix": ["lifecycleBeforeDestroy", "option.beforeDestroy()", "vlh.beforeDestroy()"],
		"body": ["beforeDestroy() {", "\t$1", "},$0"],
		"description": "Called right before a Vue instance is destroyed. At this stage the instance is still fully functional.\nThis hook is not called during server-side rendering."
	},
	"Lifecycle Hooks: destroyed()": {
		"prefix": ["lifecycleDestroyed", "option.destroyed()", "vlh.destroyed()"],
		"body": ["destroyed() {", "\t$1", "},$0"],
		"description": "Called after a Vue instance has been destroyed. When this hook is called, all directives of the Vue instance have been unbound, all event listeners have been removed, and all child Vue instances have also been destroyed.\nThis hook is not called during server-side rendering."
	},
	"Lifecycle Hooks: errorCaptured()": {
		"prefix": ["lifecycleErrorCaptured", "option.errorCaptured()", "vlh.errorCaptured()"],
		"body": [
			"errorCaptured(err, vm, info) {",
			"\t$1",
			"},$0"
		],
		"description": "Called when an error from any descendent component is captured. The hook receives three arguments: the error, the component instance that triggered the error, and a string containing information on where the error was captured. The hook can return `false` to stop the error from propagating further."
	},
	"Lifecycle Hooks: serverCacheKey()": {
		"prefix": ["lifecycleServerCacheKey", "option.serverCacheKey()", "vlh.serverCacheKey()"],
		"body": ["serverCacheKey(props) {", "\t$1", "},$0"],
		"description": "Return the cache key for the component based on incoming props. Does NOT have access to this.\nServer-side only."
	},
	"Lifecycle Hooks: serverPrefetch()": {
		"prefix": ["lifecycleServerPrefetch", "option.serverPrefetch()", "vlh.serverPrefetch()"],
		"body": ["serverPrefetch() {", "\t$1", "},$0"],
		"description": "Fetch async data during server side rendering. It should store fetched data into a global store and return a Promise. The server renderer will wait on this hook until the Promise is resolved. This hook has access to the component instance via `this`.\nServer-side only."
	}
}
