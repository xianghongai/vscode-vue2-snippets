{
	"Import Component": {
		"prefix": ["importComponent", "ivc"],
		"body": [
			"import $1 from '@/components/${1:Feature}';$0"
		]
	},

	"Vue Global Component": {
		"prefix": ["vueGlobalComponent_UNSAFE", "vgc_UNSAFE"],
		"body": [
			"Vue.component(${1:'${2:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}}'}, {",
			"\tprops: { $3 },",
			"\tdata() {",
			"\t\treturn {",
			"\t\t\t$4",
			"\t\t}",
			"\t},$0",
			"\ttemplate: '$5',",
			"});"
		],
		"description": "Vue 3.x DEPRECATED.\nRegister or retrieve a global component. Registration also automatically sets the component’s `name` with the given `id`.\nAutomatically call `Vue.extend`"
	},

	"Vue Functional Components": {
		"prefix": ["vueFunctionalComponents_UNSAFE", "vfc_UNSAFE"],
		"body": [
			"Vue.component('${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}}', {",
			"\tfunctional: true,",
			"\trender: function (createElement, context) {",
			"\t\t$2",
			"\t}",
			"});"
		],
		"description": "Vue 3.x BREAKING CHANGE.\nFunctional Components doesn’t manage any state, watch any state passed to it, and it has no lifecycle methods. Really, it’s only a function with some props.\nMark components as `functional`, which means that they’re stateless (no reactive data) and instanceless (no this context). \n In 2.3.0+ omit the `props` option and all attributes found on the component node will be implicitly extracted as props.\nThe reference will be HTMLElement when used with functional components because they’re stateless and instanceless."
	},

	"Vue Async Components": {
		"prefix": ["vueAsyncComponents", "vac"],
		"body": [
			"const ${1} = () => import('@/${2:views}/${1:FeaturePage}.vue');$0"
		],
		"description": "Vue 3.x BREAKING CHANGE.\nAsync components were created by simply defining a component as a function that returned a promise.\n in Vue 3, since functional components are defined as pure functions, async components definitions need to be explicitly defined by wrapping it in a new `defineAsyncComponent` helper, and `component` option renamed to `loader`."
	},
	"Vue Async Components with options": {
		"prefix": ["vueAsyncComponents", "vac"],
		"body": [
			"const ${1} = {",
			"\tcomponent: () => import('@/${2:views}/${1:FeaturePage.vue}'),",
			"\tdelay: 200,",
			"\ttimeout: 3000,",
			"\terror: ErrorComponent,",
			"\tloading: LoadingComponent",
			"};"
		],
		"description": "Vue 3.x BREAKING CHANGE.\nAsync components more advanced component syntax with options.\n in Vue 3, since functional components are defined as pure functions, async components definitions need to be explicitly defined by wrapping it in a new `defineAsyncComponent` helper, and `component` option renamed to `loader`."
	},

	"Retrieve Global Component": {
		"prefix": "Vue.component()_UNSAFE",
		"body": [
			"const ${2:Feature} = Vue.component('${1:FeatureComponent}');"
		],
		"description": "Vue 3.x DEPRECATED.\nretrieve a registered component (always return constructor)"
	},

	"Option Components": {
		"prefix": ["option.components"],
		"body": ["components: { ${1:Feature} },$0"]
	}
}
