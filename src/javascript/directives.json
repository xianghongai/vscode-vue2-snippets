{
	"Vue Global API - directive (all hooks)": {
		"prefix": ["Vue.directive()", "vgd"],
		"body": [
			"Vue.directive('${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}}', {",
			"\t${2:bind(el, binding, vnode) {$3\\},}",
			"\t${4:inserted(el, binding, vnode) {$5\\},}",
			"\t${6:update(el, binding, vnode, oldVnode) {$7\\},}",
			"\t${8:componentUpdated(el, binding, vnode) {$9\\},}",
			"\t${10:unbind(el, binding, vnode) {$11\\},}",
			"});$0"
		],
		"description": "Register a global directive.\nAll lifecycle hooks.\n"
	},
	"Vue Global API - directive (bind, update)": {
		"prefix": ["Vue.directive()", "vgd"],
		"body": [
			"Vue.directive('${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}}', function (el, binding, vnode) {",
			"\t${2:// `bind`, `update`}",
			"\t$0",
			"});"
		],
		"description": "Register a global directive.\nThis will be called as `bind` and `update`.\n"
	},
	"Vue Retrieve Global Directive": {
		"prefix": "Vue.directive()",
		"body": [
			"const ${2:feature}Directive = Vue.directive('${1:id}');"
		],
		"description": "Retrieve a global directive.\nReturn the directive definition if registered.\n"
	},
	"Vue Single File Directive (All Hooks)": {
		"prefix": ["vueDirective", "vds"],
		"body": [
			"export default {",
			"\tname: '${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}}',",
			"\t${2:bind(el, binding, vnode) {$3\\},}",
			"\t${4:inserted(el, binding, vnode) {${5:vnode.context.\\$nextTick(() => {\\});}\\},}",
			"\t${6:update(el, binding, vnode, oldVnode) {$7\\},}",
			"\t${8:componentUpdated(el, binding, vnode, oldVnode) {$9\\},}",
			"\t${10:unbind(el, binding, vnode) {$11\\},}",
			"};$0"
		],
		"description": "Register a single file directive (all lifecycle hooks)\n"
	},

	"Vue Options Assets - Local Directives": {
		"prefix": ["option.directives", "vld"],
		"body": [
			"directives: {",
			"\t${1:directiveName}(el, binding, vnode) {",
			"\t\t$2",
			"\t},$0",
			"},"
		],
		"description": "Define local directives in a component’s options.\nA hash of directives to be made available to the Vue instance.\n"
	},

	"Vue Directive Lifecycle Hooks - bind()": {
		"prefix": ["directive.bind", "vd.bind"],
		"body": [
			"bind (el${2:, binding${3:, vnode}}) {",
			"\t$4",
			"},$0"
		],
		"description": "Directive `bind` lifecycle.\ncalled only once, when the directive is first bound to the element. This is where you can do one-time setup work.\n"
	},
	"Vue Directive Lifecycle Hooks - inserted()": {
		"prefix": ["directive.inserted", "vd.inserted"],
		"body": [
			"inserted (el${2:, binding${3:, vnode}}) {",
			"\t$4",
			"},$0"
		],
		"description": "Directive `inserted` lifecycle.\ncalled when the bound element has been inserted into its parent node (this only guarantees parent node presence, not necessarily in-document).\n"
	},
	"Vue Directive Lifecycle Hooks - update()": {
		"prefix": ["directive.update", "vd.update"],
		"body": [
			"update (el${2:, binding${3:, vnode${4:, oldVnode}}}) {",
			"\t$5",
			"},$0"
		],
		"description": "Directive `update` lifecycle.\ncalled after the containing component’s VNode has updated, but possibly before its children have updated. The directive’s value may or may not have changed, but you can skip unnecessary updates by comparing the binding’s current and old values (see below on hook arguments).\n"
	},
	"Vue Directive Lifecycle Hooks - componentUpdated()": {
		"prefix": ["directive.componentUpdated", "vd.componentUpdated"],
		"body": [
			"componentUpdated (el${2:, binding${3:, vnode${4:, oldVnode}}}) {",
			"\t$5",
			"},$0"
		],
		"description": "Directive `componentUpdated` lifecycle.\ncalled after the containing component’s VNode and the VNodes of its children have updated.\n"
	},
	"Vue Directive Lifecycle Hooks - unbind()": {
		"prefix": ["directive.unbind", "vd.unbind"],
		"body": [
			"unbind (el${2:, binding${3:, vnode}}) {",
			"\t$4",
			"},$0"
		],
		"description": "Directive `unbind` lifecycle.\ncalled only once, when the directive is unbound from the element.\n"
	},

	"Vue Options Assets - directives": {
		"prefix": ["option.directives", "ods"],
		"body": ["directives: { ${1:Feature} },$0"]
	}
}
