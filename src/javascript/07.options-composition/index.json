{
	"Options API: provide()": {
		"prefix": ["option-provide", "ope"],
		"body": [
			"provide() {",
			"  return {",
			"    ${1:property}: ${2:'value'},",
			"  }",
			"},$0"
		],
		"description": "Type: `Object | () => Object`.\nThe `provide` option should be an object or a function that returns an object. This object contains the properties that are available for injection into its descendants. You can use ES2015 Symbols as keys in this object, but only in environments that natively support `Symbol` and `Reflect.ownKeys`.\nNote: the `provide` and `inject` bindings are NOT reactive. This is intentional. However, if you pass down an observed object, properties on that object do remain reactive.\n\n`provide` and `inject` are primarily provided for advanced plugin / component library use cases. It is NOT recommended to use them in generic application code.\n"
	},
	"Options API: inject": {
		"prefix": ["option-inject", "oit"],
		"body": [
			"inject: ['${1:property}'],$0"
		],
		"description": "Type: Array<string> | `{[key: string]: string | Symbol | Object}`.\nThe inject option should be either:\n- an array of strings, or\n- an object where the keys are the local binding name and the value is either:\n    - the key (string or Symbol) to search for in available injections, or\n    - an object where:\n        - the from property is the key (string or Symbol) to search for in available injections, and\n        - the default property is used as fallback value\nNote: the `provide` and `inject` bindings are NOT reactive. This is intentional. However, if you pass down an observed object, properties on that object do remain reactive.\n\n`provide` and `inject` are primarily provided for advanced plugin / component library use cases. It is NOT recommended to use them in generic application code.\n"
	},
	"Options API: mixins": {
		"prefix": "option-mixins",
		"body": [
			"mixins: [${1:Mixin}],$0"
		],
		"description": "Type: `Array<Object>`.\nThe `mixins` option accepts an array of mixin objects. These mixin objects can contain instance options like normal instance objects, and they will be merged against the eventual options using the same option merging logic in `Vue.extend()`. e.g. If your mixin contains a created hook and the component itself also has one, both functions will be called.\nMixin hooks are called in the order they are provided, and called before the componentâ€™s own hooks.\n"
	},
	"Options API: extends": {
		"prefix": "option-extends",
		"body": [
			"extends: ${1:Feature},$0"
		],
		"description": "Type: `Object | Function`.\nAllows declaratively extending another component (could be either a plain options object or a constructor) without having to use `Vue.extend`. This is primarily intended to make it easier to extend between single file components.\n"
	},
	"mixin (single-file)": {
		"prefix": "vue-mixin",
		"body": [
			"const ${1:feature}Mixin = {",
			"  created() {",
			"    $2",
			"  },",
			"  methods: {",
			"    ${4:handler}() {",
			"      $3",
			"    },",
			"  },",
			"};"
		],
		"description": "Define a mixin object\ndefine a component that uses this mixin.\n"
	}
}
