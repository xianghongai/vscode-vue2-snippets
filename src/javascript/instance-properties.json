{
	"this.$data": {
		"prefix": "this.$data",
		"body": ["this.\\$data$0"],
		"description": "Type: `Object`.\nThe data object that the Vue instance is observing. The Vue instance proxies access to the properties on its data object."
	},
	"this.$props": {
		"prefix": "this.$props",
		"body": ["this.\\$props$0"],
		"description": "Type: `Object`.\nAn object representing the current props a component has received. The Vue instance proxies access to the properties on its props object."
	},
	"this.$el": {
		"prefix": "this.$el",
		"body": ["this.\\$el$0"],
		"description": "Type: `Element`.\nThe root DOM element that the Vue instance is managing."
	},
	"this.$options": {
		"prefix": "this.$options",
		"body": ["this.\\$options$0"],
		"description": "Type: `Object`.\nThe instantiation options used for the current Vue instance. This is useful when you want to include custom properties in the options."
	},
	"this.$parent": {
		"prefix": "this.$parent",
		"body": ["this.\\$parent$0"],
		"description": "Type: `Vue instance`.\nThe parent instance, if the current instance has one.\nSpecify the parent instance for the instance to be created. Establishes a parent-child relationship between the two. The parent will be accessible as `this.$parent` for the child, and the child will be pushed into the parent’s `$children` array.\nUse `$parent` and `$children` sparingly - they mostly serve as an escape-hatch. Prefer using props and events for parent-child communication."
	},
	"this.$root": {
		"prefix": "this.$root",
		"body": ["this.\\$root$0"],
		"description": "Type: `Vue instance`.\nThe root Vue instance of the current component tree. If the current instance has no parents this value will be itself."
	},
	"this.$children": {
		"prefix": "this.$children_UNSAFE",
		"body": ["this.\\$children$0"],
		"description": "Removed from Vue 3.0!\nType: `Array<Vue instance>`.\nThe direct child components of the current instance. Note there’s no order guarantee for `$children`, and it is not reactive. If you find yourself trying to use `$children` for data binding, consider using an Array and `v-for` to generate child components, and use the Array as the source of truth."
	},
	"this.$slots": {
		"prefix": "this.$slots",
		"body": ["this.\\$slots$0"],
		"description": "Type: `{[name: string]: ?Array<VNode>}`\nReactive? No\nUsed to programmatically access content distributed by slots. Each named slot has its own corresponding property (e.g. the contents of `v-slot:foo` will be found at `vm.$slots.foo`). The `default` property contains either nodes not included in a named slot or contents of `v-slot:default`.\n Please note that slots are not reactive. If you need a component to re-render based on changes to data passed to a slot, we suggest considering a different strategy that relies on a reactive instance option, such as `props` or `data`.\n Note: `v-slot:foo` is supported in v2.6+. For older versions, you can use the deprecated syntax.\n Accessing `vm.$slots` is most useful when writing a component with a `render(createElement)` function."
	},
	"this.$scopedSlots": {
		"prefix": "this.$scopedSlots_UNSAFE",
		"body": ["this.\\$scopedSlots$0"],
		"description": "Removed from Vue 3.0!\nType: `{[name: string]: props => Array<VNode> | undefined}`.\nUsed to programmatically access scoped slots. For each slot, including the `default` one, the object contains a corresponding function that returns VNodes.\n Accessing `vm.$scopedSlots` is most useful when writing a component with a `render(createElement)` function.\n Note: since 2.6.0+, there are two notable changes to this property:\n 1. Scoped slot functions are now guaranteed to return an array of VNodes, unless the return value is invalid, in which case the function will return `undefined`.\n 2. All `$slots` are now also exposed on `$scopedSlots` as functions. If you work with render functions, it is now recommended to always access slots via `$scopedSlots`, whether they currently use a scope or not. This will not only make future refactors to add a scope simpler, but also ease your eventual migration to Vue 3, where all slots will be functions.\n2.x Syntax: `this.$scopedSlots.header`\n3.x Syntax: `this.$slots.header()`"
	},
	"this.$refs": {
		"prefix": "this.$refs",
		"body": ["this.\\$refs$0"],
		"description": "Type: `Object`.\nAn object of DOM elements and component instances, registered with `ref` attributes."
	},
	"this.$isServer": {
		"prefix": "this.$isServer",
		"body": ["this.\\$isServer$0"],
		"description": "Type: `boolean`.\nWhether the current Vue instance is running on the server."
	},
	"this.$attrs": {
		"prefix": "this.$attrs",
		"body": ["this.\\$attrs$0"],
		"description": "Type: `{[key: string]: string}`.\nContains parent-scope attribute bindings (except for `class` and `style`) that are not recognized (and extracted) as props. When a component doesn’t have any declared props, this essentially contains all parent-scope bindings (except for `class` and `style`), and can be passed down to an inner component via `v-bind=\"$attrs\"` - useful when creating higher-order components."
	},
	"this.$listeners": {
		"prefix": "this.$listeners_UNSAFE",
		"body": ["this.\\$listeners$0"],
		"description": "Removed from Vue 3.0!\nType: `{[key: string]: Function | Array<Function>}`.\nContains parent-scope `v-on` event listeners (without `.native` modifiers). This can be passed down to an inner component via `v-on=\"$listeners\"` - useful when creating transparent wrapper components."
	}
}
