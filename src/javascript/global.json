{
	"Vue.config.silent": {
		"prefix": "Vue.config.silent_UNSAFE",
		"body": ["Vue.config.silent = ${1:false};$0"],
		"description": "Type: `boolean`, Default: `false`\nSuppress all Vue logs and warnings."
	},
	"Vue.config.optionMergeStrategies": {
		"prefix": "Vue.config.optionMergeStrategies_UNSAFE",
		"body": [
			"Vue.config.optionMergeStrategies.option = function (parent, child, vm) {",
			"\t${1}",
			"};$0"
		],
		"description": "Type: `{[key: string]: Function}`\nDefault: `{}`\nDefine custom merging strategies for options.\nThe merge strategy receives the value of that option defined on the parent and child instances as the first and second arguments, respectively. The context Vue instance is passed as the third argument."
	},
	"Vue.config.devtools": {
		"prefix": "Vue.config.devtools_UNSAFE",
		"body": ["Vue.config.devtools = ${1:true};"],
		"description": "Type: `boolean`, Default: `true`, (`false` in production builds)\nConfigure whether to allow vue-devtools inspection. This option’s default value is `true` in development builds and `false` in production builds. You can set it to `true` to enable inspection for production builds."
	},
	"Vue.config.errorHandler": {
		"prefix": "Vue.config.errorHandler_UNSAFE",
		"body": [
			"Vue.config.errorHandler = function (err, vm, info) {",
			"\t${1}",
			"};$0"
		],
		"description": "Type: `Function`.\n Default: `undefined`.\nAssign a handler for uncaught errors during component render function and watchers. The handler gets called with the error and the Vue instance.\n- In 2.2.0+, this hook also captures errors in component lifecycle hooks. Also, when this hook is `undefined`, captured errors will be logged with `console.error` instead of crashing the app.\n- In 2.4.0+, this hook also captures errors thrown inside Vue custom event handlers.\n- In 2.6.0+, this hook also captures errors thrown inside `v-on` DOM listeners. In addition, if any of the covered hooks or handlers returns a Promise chain (e.g. async functions), the error from that Promise chain will also be handled.\n- Error tracking services Sentry and Bugsnag provide official integrations using this option."
	},
	"Vue.config.warnHandler": {
		"prefix": "Vue.config.warnHandler_UNSAFE",
		"body": [
			"Vue.config.warnHandler = function (msg, vm, trace) {",
			"\t${1}",
			"};$0"
		],
		"description": "Type: `Function`.\n Default: `undefined`.\nAssign a custom handler for runtime Vue warnings. Note this only works during development and is ignored in production.(New in 2.4.0+)"
	},
	"Vue.config.ignoredElements": {
		"prefix": "Vue.config.ignoredElements_UNSAFE",
		"body": [
			"Vue.config.ignoredElements = [${1:'${2:feature-web-component}'}];${0}"
		],
		"description": "Type: `Array<string | RegExp>`.\n Default: `[]`.\n Make Vue ignore custom elements defined outside of Vue (e.g., using the Web Components APIs). Otherwise, it will throw a warning about an `Unknown custom element`, assuming that you forgot to register a global component or misspelled a component name.\nVue 3.x is `app.config.isCustomElement`"
	},
	"Vue.config.keyCodes": {
		"prefix": "Vue.config.keyCodes_UNSAFE",
		"body": [
			"Vue.config.keyCodes = {",
			"\t\"${1:kebab-case}\": ${2:179},",
			"};"
		],
		"description": "`KeyboardEvent.keyCode` has been deprecated.\nType: `{[key: string]: number | Array<number>}`.\n Default: `{}`.\n Define custom key alias(es) for `v-on`."
	},
	"Vue.config.performance": {
		"prefix": "Vue.config.performance_UNSAFE",
		"body": ["Vue.config.performance = ${1:false};"],
		"description": "Type: `boolean`, Default: `false (from 2.2.3+)`\nSet this to `true` to enable component init, compile, render and patch performance tracing in the browser devtool performance/timeline panel. Only works in development mode and in browsers that support the performance.mark API."
	},
	"Vue.config.productionTip": {
		"prefix": "Vue.config.productionTip_UNSAFE",
		"body": ["Vue.config.productionTip = ${1:true};"],
		"description": "Vue 3.x Removed!\nType: `boolean`, Default: `true`\nSet this to `false` to prevent the production tip on Vue startup."
	},

	"Vue.nextTick([callback, context])": {
		"prefix": "Vue.nextTick()_UNSAFE",
		"body": ["Vue.nextTick(function () {", "\t$0", "});"],
		"description": "Defer the callback to be executed after the next DOM update cycle. Use it immediately after you’ve changed some data to wait for the DOM update."
	},
	"Vue.nextTick().then()": {
		"prefix": "Vue.nextTick().then()_UNSAFE",
		"body": [
			"Vue.nextTick().then(function () {",
			"\t$0",
			"});"
		],
		"description": "New in 2.1.0+: returns a Promise if no callback is provided and Promise is supported in the execution environment. Please note that Vue does not come with a Promise polyfill, so if you target browsers that don’t support Promises natively (looking at you, IE), you will have to provide a polyfill yourself."
	},
	"Vue.set(target, propertyName/index, value)": {
		"prefix": "Vue.set()_UNSAFE",
		"body": [
			"Vue.set(${1:vm.${2:object/array}}, ${3:propertyName/index}, ${4:value});$0"
		],
		"description": "Adds a property to a reactive object, ensuring the new property is also reactive, so triggers view updates. This must be used to add new properties to reactive objects, as Vue cannot detect normal property additions (e.g. this.`myObject.newProperty = 'hi'`).\nReturns: the set value."
	},
	"Vue.delete(target, propertyName/index)": {
		"prefix": "Vue.delete()_UNSAFE",
		"body": [
			"Vue.delete(${1:vm.${2:object/array}}, ${3:propertyName/index}, ${4:value});$0"
		],
		"description": "Delete a property on an object. If the object is reactive, ensure the deletion triggers view updates. This is primarily used to get around the limitation that Vue cannot detect property deletions, but you should rarely need to use it."
	},
	"Vue.observable(object)": {
		"prefix": "Vue.observable()_UNSAFE",
		"body": [
			"const ${4:state} = Vue.observable(${1:{ ${2:property}: ${3:value} \\}});$0"
		],
		"description": "Arguments: `{Object} object`.\nMake an object reactive. Internally, Vue uses this on the object returned by the `data` function.\nThe returned object can be used directly inside render functions and computed properties, and will trigger appropriate updates when mutated. It can also be used as a minimal, cross-component state store for simple scenarios.\nVue 3.x replaced by `Vue.reactive`"
	}
}
