{
	"this.$nextTick()": {
		"prefix": ["this.$nextTick(cb)", "nextTick"],
		"body": ["this.\\$nextTick(${1:function () {$0\\}});"],
		"description": "Defer the callback to be executed after the next DOM update cycle. Use it immediately after you've changed some data to wait for the DOM update. This is the same as the global `nextTick`, except that the callback's this context is automatically bound to the instance calling `this` method.\nSince `$nextTick()` returns a promise, using the new ES2017 async/await syntax: `await this.$nextTick();`"
	},
	"this.$forceUpdate()": {
		"prefix": "this.$forceUpdate()",
		"body": ["this.\\$forceUpdate()$0;"],
		"description": "Force the component instance to re-render. Note it does not affect all child components, only the instance itself and child components with inserted slot content."
	},
	"this.$destroy()": {
		"prefix": "this.$destroy()",
		"body": ["this.\\$destroy()$0;"],
		"description": "Completely destroy a vm. Clean up its connections with other existing vms, unbind all its directives, turn off all event listeners.\rTriggers the `beforeDestroy` and `destroyed` hooks."
	},
	"this.$mount()": {
		"prefix": "this.$mount()",
		"body": [
			"new ${1:FeatureComponent}().\\$mount('#${2:app}')$0;"
		],
		"description": "`new FeatureComponent({ el: '#app' });`\n `const featureComponent = new FeatureComponent().$mount();`\n `document.getElementById('app').appendChild(featureComponent.$el);`\n `vm.$mount([elementOrSelector])`"
	}
}
