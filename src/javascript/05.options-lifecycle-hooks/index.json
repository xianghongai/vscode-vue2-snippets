{
	"Options API: beforeCreate()": {
		"prefix": [
			"option-beforeCreate()",
			"olbc"
		],
		"body": [
			"beforeCreate() {",
			"  $1",
			"},$0",
			""
		],
		"description": "Called synchronously immediately after the instance has been initialized, before data observation and event/watcher setup.\n"
	},
	"Options API: created()": {
		"prefix": [
			"option-created()",
			"olc"
		],
		"body": [
			"created() {",
			"  $1",
			"},$0",
			""
		],
		"description": "Called synchronously after the instance is created. At this stage, the instance has finished processing the options which means the following have been set up: data observation, computed properties, methods, watch/event callbacks. However, the mounting phase has not been started, and the $el property will not be available yet.\n"
	},
	"Options API: beforeMount()": {
		"prefix": [
			"option-beforeMount()",
			"olbm"
		],
		"body": [
			"beforeMount() {",
			"  $1",
			"},$0",
			""
		],
		"description": "Called right before the mounting begins: the render function is about to be called for the first time.\nThis hook is not called during server-side rendering.\n"
	},
	"Options API: mounted()": {
		"prefix": [
			"option-mounted()",
			"olm"
		],
		"body": [
			"mounted() {",
			"  $1",
			"},$0",
			""
		],
		"description": "Called after the instance has been mounted, where `el` is replaced by the newly created `vm.$el`. If the root instance is mounted to an in-document element, `vm.$el` will also be in-document when `mounted` is called.\nNote that `mounted` does not guarantee that all child components have also been mounted. If you want to wait until the entire view has been rendered, you can use `vm.$nextTick` inside of mounted.\nThis hook is not called during server-side rendering.\n"
	},
	"Options API: beforeUpdate()": {
		"prefix": [
			"option-beforeUpdate()",
			"olbu"
		],
		"body": [
			"beforeUpdate() {",
			"  $1",
			"},$0",
			""
		],
		"description": "Called when data changes, before the DOM is patched. This is a good place to access the existing DOM before an update, e.g. to remove manually added event listeners.\nThis hook is not called during server-side rendering, because only the initial render is performed server-side.\nThis hook is not called during server-side rendering, because only the initial render is performed server-side.\n"
	},
	"Options API: updated()": {
		"prefix": [
			"option-updated()",
			"olu"
		],
		"body": [
			"updated() {",
			"  $1",
			"},$0",
			""
		],
		"description": "Called after a data change causes the virtual DOM to be re-rendered and patched.\nThe component’s DOM will have been updated when this hook is called, so you can perform DOM-dependent operations here. However, in most cases you should avoid changing state inside the hook. To react to state changes, it’s usually better to use a computed property or watcher instead.\nNote that updated does not guarantee that all child components have also been re-rendered. If you want to wait until the entire view has been re-rendered, you can use vm.$nextTick inside of updated.\nThis hook is not called during server-side rendering.\n"
	},
	"Options API: activated()": {
		"prefix": [
			"option-activated()",
			"ola"
		],
		"body": [
			"activated() {",
			"  $1",
			"},$0",
			""
		],
		"description": "Called when a kept-alive component is activated.\nThis hook is not called during server-side rendering.\n"
	},
	"Options API: deactivated()": {
		"prefix": [
			"option-deactivated()",
			"olda"
		],
		"body": [
			"deactivated() {",
			"  $1",
			"},$0",
			""
		],
		"description": "Called when a kept-alive component is deactivated.\nThis hook is not called during server-side rendering.\n"
	},
	"Options API: beforeDestroy()": {
		"prefix": [
			"option-beforeDestroy()",
			"olbd"
		],
		"body": [
			"beforeDestroy() {",
			"  $1",
			"},$0",
			""
		],
		"description": "Called right before a Vue instance is destroyed. At this stage the instance is still fully functional.\nThis hook is not called during server-side rendering.\n"
	},
	"Options API: destroyed()": {
		"prefix": [
			"option-destroyed()",
			"old"
		],
		"body": [
			"destroyed() {",
			"  $1",
			"},$0",
			""
		],
		"description": "Called after a Vue instance has been destroyed. When this hook is called, all directives of the Vue instance have been unbound, all event listeners have been removed, and all child Vue instances have also been destroyed.\nThis hook is not called during server-side rendering.\n"
	},
	"Options API: errorCaptured()": {
		"prefix": [
			"option-errorCaptured()",
			"olec"
		],
		"body": [
			"errorCaptured(err, vm, info) {",
			"  $1",
			"},$0",
			""
		],
		"description": "Called when an error from any descendent component is captured. The hook receives three arguments: the error, the component instance that triggered the error, and a string containing information on where the error was captured. The hook can return `false` to stop the error from propagating further.\n"
	},
	"Options API: async created()": {
		"prefix": [
			"async-option-created()",
			"asolc"
		],
		"body": [
			"async created() {",
			"  $1",
			"},$0",
			""
		]
	},
	"Options API: async mounted()": {
		"prefix": [
			"async-option-mounted()",
			"asolm"
		],
		"body": [
			"async mounted() {",
			"  $1",
			"},$0",
			""
		]
	},
	"Options API: async updated()": {
		"prefix": [
			"async-option-updated()"
		],
		"body": [
			"async updated() {",
			"  $1",
			"},$0",
			""
		]
	},
	"Options API: async activated()": {
		"prefix": [
			"async-option-activated()"
		],
		"body": [
			"async activated() {",
			"  $1",
			"},$0",
			""
		]
	},
	"Options API: async deactivated()": {
		"prefix": [
			"async-option-deactivated()"
		],
		"body": [
			"async deactivated() {",
			"  $1",
			"},$0",
			""
		],
		"description": "Called when a kept-alive component is deactivated.\nThis hook is not called during server-side rendering.\n"
	},
	"Options API: async beforeDestroy()": {
		"prefix": [
			"async-option-beforeDestroy()"
		],
		"body": [
			"async beforeDestroy() {",
			"  $1",
			"},$0",
			""
		]
	},
	"Options API: async destroyed()": {
		"prefix": [
			"async-option-destroyed()"
		],
		"body": [
			"async destroyed() {",
			"  $1",
			"},$0",
			""
		]
	}
}
