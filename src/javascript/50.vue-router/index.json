{
	"Vue Router: import vue-router": {
		"prefix": "import-vue-router",
		"body": [
			"import VueRouter from 'vue-router';$0"
		],
		"description": "import VueRouter\n"
	},
	"Vue Router: new VueRouter()": {
		"prefix": "newVueRouter",
		"body": [
			"Vue.use(VueRouter);",
			"",
			"const ${1:router} = new VueRouter({",
			"  mode: 'history',",
			"  ${2:routes}",
			"});$0"
		],
		"description": "Create the router instance, The default is hash mode.\nRouter Construction Options:\n- routes: Array<RouteConfig>,\n- mode: 'hash' | 'history' | 'abstract' (Node.js),\n- base: '/',\n"
	},
	"Vue Router: routes": {
		"prefix": "routes",
		"body": [
			"const ${1:routes} = [",
			"  { path: '${2:/feature}', component: ${3:Feature} },",
			"  {",
			"    path: '${4:/feature}',",
			"    component: ${5:Feature},",
			"    children: [",
			"      {",
			"        path: '${6:/feature}',",
			"        component: ${7:Feature},",
			"      },",
			"    ],",
			"  },",
			"];"
		],
		"description": "Define routes\n"
	},
	"Vue Router: route": {
		"prefix": "route",
		"body": [
			"{",
			"  path: '${1:pathName}',",
			"  component: ${3:Feature},",
			"},"
		],
		"description": "Define route\n"
	},
	"Vue Router: route (Named)": {
		"prefix": "route-named",
		"body": [
			"{",
			"  path: '${1:/named-redirect}',",
			"  name: '${2:feature}',",
			"  component: ${3:Feature},",
			"},"
		],
		"description": "Define named route\n"
	},
	"Vue Router: route (Named Views)": {
		"prefix": "route-named-views",
		"body": [
			"{",
			"  path: '${1:/pathname}',",
			"  components: {",
			"    default: ${2:Feature},",
			"    view${3:Name}: ${3},",
			"  },",
			"},"
		],
		"description": "\n"
	},
	"Vue Router: route (Alias)": {
		"prefix": "route-alias",
		"body": [
			"{",
			"  path: '${1:/feature}',",
			"  component: ${2:Feature},",
			"  alias: '{3:/feature}',",
			"},"
		],
		"description": "Define alias route\n"
	},
	"Vue Router: route (Redirect)": {
		"prefix": "route-redirect",
		"body": [
			"{ path: '${1:/feature/:id}', redirect: '${2:/pathname}' },"
		],
		"description": "Define redirect route\nExample:\n// relative redirect to a sibling route\n`{ path: 'relative-redirect', redirect: 'feature' }`\n// absolute redirect\n`{ path: '/absolute-redirect', redirect: '/feature' },`\n// named redirect\n`{ path: '/named-redirect', redirect: { name: 'feature' }},`\n// redirect with params\n`{ path: '/redirect-with-params/:id', redirect: '/with-params/:id' },`\n"
	},
	"Vue Router: route (Redirect, Named)": {
		"prefix": "route-redirect-named",
		"body": [
			"{ path: '${1:/feature/:id}', redirect: { name: '${2:routename}' }},"
		],
		"description": "Define redirect route\n"
	},
	"Vue Router: route (Redirect, Dynamic)": {
		"prefix": "route-redirect-dynamic",
		"body": [
			"{",
			"  path: '/dynamic-redirect/:id?',",
			"  redirect: (to) => {",
			"    const { hash, params, query } = to;",
			"    if (query.property === 'value') {",
			"      return { path: '/pathname', query: null };",
			"    }",
			"    if (hash === '#feature') {",
			"      return { name: 'routename', hash: '' };",
			"    }",
			"    if (params.id) {",
			"      return '/with-params/:id';",
			"    } else {",
			"      return '/feature';",
			"    }",
			"  },",
			"},"
		],
		"description": "Define dynamic redirect\n"
	},
	"Vue Router: route (lazy loading)": {
		"prefix": "route-lazy",
		"body": [
			"{",
			"  path: '${1:pathName}',",
			"  name: '${2:routeName}',",
			"  component: () => import('./${3:Feature}'),",
			"},"
		],
		"description": "Define lazy loading route\n"
	},
	"Vue Router: route (pass props: Boolean mode)": {
		"prefix": "route-props-boolean",
		"body": [
			"{",
			"  path: '${1:/feature}',",
			"  component: ${2:Feature},",
			"  props: true,",
			"},$0"
		],
		"description": "Passing Props to Route Components.\nWhen `props` is set to `true`, the `route.params` will be set as the component props.\n"
	},
	"Vue Router: route (pass props: Object mode)": {
		"prefix": "route-props-object",
		"body": [
			"{",
			"  path: '${1:/feature}',",
			"  component: ${2:Feature},",
			"  props: { ${3:property}: '${4:value}' },",
			"},$0"
		],
		"description": "Passing Props to Route Components\n"
	},
	"Vue Router: route (pass props: Function mode)": {
		"prefix": "route-props-function",
		"body": [
			"{",
			"  path: '${1:/feature}',",
			"  component: ${2:Feature},",
			"  props: (route) => ($3{",
			"    property: route.params.property,",
			"    key: route.query.key,",
			"  }),",
			"},$0"
		],
		"description": "Passing Props to Route Components\n"
	},
	"Vue Router: route (pass props: Function mode, named views)": {
		"prefix": "route-props-function-named-views",
		"body": [
			"{",
			"  path: '${1:/feature}',",
			"  component: ${2:Feature},",
			"  props: {",
			"    default: ${3:true},",
			"    ${4:viewName}: (route) => ($5{",
			"      property: route.params.property,",
			"    }),",
			"  },",
			"},$0"
		],
		"description": "Passing Props to Route Components\n"
	},
	"Vue Router: navigate to path with literal string": {
		"prefix": "router-push",
		"body": [
			"${2:this.\\$}router.push('${1:pathname}');"
		],
		"description": "Router navigate to path.\n#syntax:\nrouter.push(location, onComplete?, onAbort?)\nrouter.push(location).then(onComplete).catch(onAbort)\n"
	},
	"VueRouter navigate to path": {
		"prefix": "router-push-path",
		"body": [
			"${2:this.\\$}router.push({ path: '${1:pathname}' });"
		],
		"description": "Router navigate to path.\n#syntax:\nrouter.push(location, onComplete?, onAbort?)\nrouter.push(location).then(onComplete).catch(onAbort)\n"
	},
	"VueRouter navigate to path with params": {
		"prefix": "router-push-params",
		"body": [
			"${5:this.\\$}router.push({",
			"  path: ${1:'${2:pathname}'},",
			"  params: { ${3:property}: ${4:'value'} },",
			"});"
		],
		"description": "Router navigate to path with params.\n#syntax:\nrouter.push(location, onComplete?, onAbort?)\nrouter.push(location).then(onComplete).catch(onAbort)\n"
	},
	"VueRouter navigate to path with query": {
		"prefix": "router-push-query",
		"body": [
			"${5:this.\\$}router.push({",
			"  path: ${1:'${2:pathname}'},",
			"  query: { ${3:property}: ${4:'value'} },",
			"});"
		],
		"description": "Router navigate to path with query.\n#syntax:\nrouter.push(location, onComplete?, onAbort?)\nrouter.push(location).then(onComplete).catch(onAbort)\n"
	},
	"VueRouter navigate to named routes": {
		"prefix": "router-push-named",
		"body": [
			"${2:this.\\$}router.push({ name: '${1:routename}' });"
		],
		"description": "Router navigate to named routes\n#syntax:\nrouter.push(location, onComplete?, onAbort?)\nrouter.push(location).then(onComplete).catch(onAbort)\n"
	},
	"VueRouter navigate to named routes with params": {
		"prefix": "router-push-named-params",
		"body": [
			"${5:this.\\$}router.push({",
			"  name: ${1:'${2:routename}'},",
			"  params: { ${3:property}: ${4:'value'} },",
			"});"
		],
		"description": "Router navigate to named routes with params.\n#syntax:\nrouter.push(location, onComplete?, onAbort?)\nrouter.push(location).then(onComplete).catch(onAbort)\n"
	},
	"VueRouter navigate to named routes with query": {
		"prefix": "router-push-named-query",
		"body": [
			"${5:this.\\$}router.push({",
			"  name: ${1:'${2:routename}'},",
			"  query: { ${3:property}: ${4:'value'} },",
			"});"
		],
		"description": "Router navigate to named routes with query.\n#syntax:\nrouter.push(location, onComplete?, onAbort?)\nrouter.push(location).then(onComplete).catch(onAbort)\n"
	},
	"VueRouter navigate to path without pushing a new history entry": {
		"prefix": "router-replace",
		"body": [
			"${5:this.\\$}router.replace({",
			"  path: ${1:'${2:pathname}'},",
			"  params: { ${3:property}: ${4:'value'} },",
			"});"
		],
		"description": "Router navigate to path without pushing a new history entry.\n#syntax:\nrouter.push(location, onComplete?, onAbort?)\nrouter.replace(location).then(onComplete).catch(onAbort)\n"
	},
	"VueRouter navigate to named routes without pushing a new history entry": {
		"prefix": "router-replace-named",
		"body": [
			"${5:this.\\$}router.replace({",
			"  name: ${1:'${2:routename}'},",
			"  params: { ${3:property}: ${4:'value'} },",
			"});"
		],
		"description": "Router navigate to named routes without pushing a new history entry.\n#syntax:\nrouter.replace(location, onComplete?, onAbort?)\nrouter.push(location).then(onComplete).catch(onAbort)\n"
	},
	"VueRouter Programmatically navigate to a new URL: go(n)": {
		"prefix": "router-go",
		"body": [
			"${2:this.\\$}router.go('${1:n}');"
		],
		"description": "This method takes a single integer as parameter that indicates by how many steps to go forwards or go backwards in the history stack.\n"
	},
	"VueRouter Programmatically navigate to a new URL: back()": {
		"prefix": "router-back",
		"body": [
			"${2:this.\\$}router.back();"
		],
		"description": "go backwards in the history stack.\n"
	},
	"VueRouter Programmatically navigate to a new URL: forward()": {
		"prefix": "router-forward",
		"body": [
			"${2:this.\\$}router.forward();"
		],
		"description": "go forwards in the history stack.\n"
	},
	"VueRouter Reverse URL resolving": {
		"prefix": "router-resolve",
		"body": [
			"router.resolve(to, current, append);"
		],
		"description": "Given location in form same as used in `<router-link/>`.\n"
	},
	"VueRouter Global Before Guards": {
		"prefix": "router-beforeEach",
		"body": [
			"router.beforeEach((to, from, next) => {",
			"  /* must call `next` */",
			"  $0",
			"});"
		],
		"description": "register global before guards.\n`beforeEach(callback(to, from, next))`\n"
	},
	"VueRouter Global Resolve Guards": {
		"prefix": "router-beforeResolve",
		"body": [
			"router.beforeResolve((to, from, next) => {",
			"  /* must call `next` */",
			"  $0",
			"});"
		],
		"description": "register global resolve guards.\n`beforeResolve(callback(to, from, next))`\n"
	},
	"VueRouter Global After Hooks": {
		"prefix": "router-afterEach",
		"body": [
			"router.afterEach((to, from) => {",
			"  $0",
			"});"
		],
		"description": "register global after hooks.\n`afterEach(callback(to, from))`\n"
	},
	"VueRouter Per-Route Guard": {
		"prefix": "route-beforeEnter",
		"body": [
			"beforeEnter((to, from, next) => {",
			"  /* must call `next` */",
			"  $0",
			"});"
		],
		"description": "register guards on a route's configuration object.\n`beforeEnter(callback(to, from, next))`\n"
	},
	"VueRouter In-Component Guards": {
		"prefix": "route-leave-confirm",
		"body": [
			"beforeRouteEnter(to, from, next) {",
			"  next((vm) => {$0});",
			"},",
			"beforeRouteUpdate(to, from, next) {",
			"  // this.name = to.params.name;",
			"  next();",
			"},",
			"beforeRouteLeave(to, from, next) {",
			"  const answer = window.confirm(",
			"    'Do you really want to leave? you have unsaved changes!'",
			"  );",
			"  if (answer) {",
			"    next();",
			"  } else {",
			"    next(false);",
			"  }",
			"},"
		],
		"description": "define route navigation guards inside route components \n"
	},
	"VueRouter Dynamically add more routes to the router": {
		"prefix": "router-addRoutes",
		"body": [
			"router.addRoutes(${1:routes});$0"
		],
		"description": "The argument must be an Array using the same route config format with the `routes` constructor option.\naddRoutes(routes)\n"
	},
	"VueRouter instance method: onReady(callback, errorCallback)": {
		"prefix": "router-onReady",
		"body": [
			"router.onReady(${1:callback}, ${2:errorCallback});$0"
		],
		"description": "This method queues a callback to be called when the router has completed the initial navigation, which means it has resolved all async enter hooks and async components that are associated with the initial route.\n"
	},
	"VueRouter instance method: onError(callback)": {
		"prefix": "router-onError",
		"body": [
			"router.onError(${1:callback});$0"
		],
		"description": "Register a callback which will be called when an error is caught during a route navigation. Note for an error to be called, it must be one of the following scenarios:\nThe error is thrown synchronously inside a route guard function;\nThe error is caught and asynchronously handled by calling next(err) inside a route guard function;\nAn error occurred when trying to resolve an async component that is required to render a route.\n"
	},
	"VueRouter instance method: getMatchedComponents(to)": {
		"prefix": "router-getMatchedComponents",
		"body": [
			"router.getMatchedComponents(to);"
		],
		"description": "Returns an Array of the components (definition/constructor, not instances) matched by the provided location or the current route. This is mostly used during server-side rendering to perform data prefetching.\n"
	},
	"VueRouter $route.path": {
		"prefix": "this.$route.path",
		"body": [
			"this.\\$route.path"
		],
		"description": "A string that equals the path of the current route, always resolved as an absolute path.\n"
	},
	"VueRouter $route.params": {
		"prefix": "this.$route.params",
		"body": [
			"this.\\$route.params"
		],
		"description": "An object that contains key/value pairs of dynamic segments and star segments. If there are no params the value will be an empty object.\n"
	},
	"VueRouter $route.query": {
		"prefix": "this.$route.query",
		"body": [
			"this.\\$route.query"
		],
		"description": "An object that contains key/value pairs of the query string.\n"
	},
	"VueRouter $route.hash": {
		"prefix": "this.$route.hash",
		"body": [
			"this.\\$route.hash"
		],
		"description": "The hash of the current route (with the #), if it has one. If no hash is present the value will be an empty string.\n"
	},
	"VueRouter $route.fullPath": {
		"prefix": "this.$route.fullPath",
		"body": [
			"this.\\$route.fullPath"
		],
		"description": "The full resolved URL including query and hash.\n"
	},
	"VueRouter $route.matched": {
		"prefix": "this.$route.matched",
		"body": [
			"this.\\$route.matched"
		],
		"description": "An Array containing route records for all nested path segments of the current route. \n"
	},
	"VueRouter $route.name": {
		"prefix": "this.$route.name",
		"body": [
			"this.\\$route.name"
		],
		"description": "The name of the current route, if it has one.\n"
	},
	"VueRouter $route.redirectedFrom": {
		"prefix": "this.$route.redirectedFrom",
		"body": [
			"this.\\$route.redirectedFrom"
		],
		"description": "The name of the route being redirected from, if there were one.\n"
	},
	"VueRouter Lazy Loading Routes": {
		"prefix": "lazy-route",
		"body": [
			"const ${1} = () => import('@/${2:features}/${1:Feature}.vue');$0"
		]
	},
	"VueRouter Lazy Loading Routes, Grouping Components in the Same Chunk": {
		"prefix": "lazy-route-chunk",
		"body": [
			"const ${1:Feature1} = () => import(/* webpackChunkName: \"${3:feature}\" */ '${4:.}/${1}.vue');",
			"const ${2:Feature2} = () => import(/* webpackChunkName: \"${3}\" */ '${5:.}/${2}.vue');"
		]
	}
}
