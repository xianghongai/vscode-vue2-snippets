{
	"router.beforeEach()": {
		"prefix": "router-beforeEach",
		"body": [
			"router.beforeEach((to, from, next) => {",
			"  /* must call `next` */$1",
			"});"
		],
		"description": "Global Before Guards.\n全局前置守卫。\n"
	},
	"router.beforeResolve()": {
		"prefix": "router-beforeResolve",
		"body": [
			"router.beforeResolve((to, from, next) => {",
			"  /* must call `next` */$1",
			"});"
		],
		"description": "Global Resolve Guards.\n全局解析守卫。\n"
	},
	"router.afterEach()": {
		"prefix": "router-afterEach",
		"body": [
			"router.afterEach((to, from) => {",
			"  $1",
			"});"
		],
		"description": "Global After Guards.\n全局后置钩子。\n"
	},
	"this.$router.push('pathname')": {
		"prefix": "router-push",
		"body": [
			"${9:this.\\$}router.push('${1:pathname}');"
		],
		"description": "Router navigate to path.\n#syntax:\nrouter.push(location, onComplete?, onAbort?)\nrouter.push(location).then(onComplete).catch(onAbort)\n"
	},
	"this.$router.push({ path })": {
		"prefix": "router-push-path",
		"body": [
			"${9:this.\\$}router.push({ path: '${1:pathname}' });"
		],
		"description": "Router navigate to path.\n#syntax:\nrouter.push(location, onComplete?, onAbort?)\nrouter.push(location).then(onComplete).catch(onAbort)\n"
	},
	"this.$router.push({ path, params })": {
		"prefix": "router-push-path-params",
		"body": [
			"${9:this.\\$}router.push({",
			"  path: ${1:'${2:pathname}'},",
			"  params: { ${3:property}: ${4:'value'} },$0",
			"});"
		],
		"description": "Router navigate to path with params.\n#syntax:\nrouter.push(location, onComplete?, onAbort?)\nrouter.push(location).then(onComplete).catch(onAbort)\n"
	},
	"this.$router.push({ path, query })": {
		"prefix": "router-push-path-query",
		"body": [
			"${9:this.\\$}router.push({",
			"  path: ${1:'${2:pathname}'},",
			"  query: { ${3:property}: ${4:'value'} },$0",
			"});"
		],
		"description": "Router navigate to path with query.\n#syntax:\nrouter.push(location, onComplete?, onAbort?)\nrouter.push(location).then(onComplete).catch(onAbort)\n"
	},
	"this.$router.push({ path, params, query })": {
		"prefix": "router-push-path-params-query",
		"body": [
			"${9:this.\\$}router.push({",
			"  path: ${1:'${2:pathname}'},",
			"  params: { ${3:property}: ${4:'value'} },",
			"  query: { ${5:property}: ${6:'value'} },$0",
			"});"
		]
	},
	"this.$router.push({ name })": {
		"prefix": "router-push-name",
		"body": [
			"${9:this.\\$}router.push({ name: '${1:routeName}' });"
		],
		"description": "Router navigate to named routes\n#syntax:\nrouter.push(location, onComplete?, onAbort?)\nrouter.push(location).then(onComplete).catch(onAbort)\n"
	},
	"this.$router.push({ name, params })": {
		"prefix": "router-push-name-params",
		"body": [
			"${9:this.\\$}router.push({",
			"  name: ${1:'${2:routeName}'},",
			"  params: { ${3:property}: ${4:'value'} },$0",
			"});"
		],
		"description": "Router navigate to named routes with params.\n#syntax:\nrouter.push(location, onComplete?, onAbort?)\nrouter.push(location).then(onComplete).catch(onAbort)\n"
	},
	"this.$router.push({ name, query })": {
		"prefix": "router-push-name-query",
		"body": [
			"${9:this.\\$}router.push({",
			"  name: ${1:'${2:routeName}'},",
			"  query: { ${3:property}: ${4:'value'} },$0",
			"});"
		],
		"description": "Router navigate to named routes with query.\n#syntax:\nrouter.push(location, onComplete?, onAbort?)\nrouter.push(location).then(onComplete).catch(onAbort)\n"
	},
	"this.$router.push({ name, params, query })": {
		"prefix": "router-push-name-params-query",
		"body": [
			"${9:this.\\$}router.push({",
			"  name: ${1:'${2:routeName}'},",
			"  params: { ${3:property}: ${4:'value'} },",
			"  query: { ${5:property}: ${6:'value'} },$0",
			"});"
		]
	},
	"this.$router.replace({ path, params })": {
		"prefix": "router-replace",
		"body": [
			"${9:this.\\$}router.replace({",
			"  path: ${1:'${2:pathname}'},",
			"  params: { ${3:property}: ${4:'value'} },",
			"});"
		],
		"description": "Router navigate to path without pushing a new history entry.\n#syntax:\nrouter.push(location, onComplete?, onAbort?)\nrouter.replace(location).then(onComplete).catch(onAbort)\n"
	},
	"this.$router.replace({ name, params })": {
		"prefix": "router-replace-name",
		"body": [
			"${9:this.\\$}router.replace({",
			"  name: ${1:'${2:routeName}'},",
			"  params: { ${3:property}: ${4:'value'} },",
			"});"
		],
		"description": "Router navigate to named routes without pushing a new history entry.\n#syntax:\nrouter.replace(location, onComplete?, onAbort?)\nrouter.push(location).then(onComplete).catch(onAbort)\n"
	},
	"this.$router.go(n)": {
		"prefix": "router-go",
		"body": [
			"${9:this.\\$}router.go('${1:n}');"
		],
		"description": "This method takes a single integer as parameter that indicates by how many steps to go forwards or go backwards in the history stack.\n"
	},
	"this.$router.back()": {
		"prefix": "router-back",
		"body": [
			"${9:this.\\$}router.back();"
		],
		"description": "go backwards in the history stack.\n"
	},
	"this.$router.forward()": {
		"prefix": "router-forward",
		"body": [
			"${9:this.\\$}router.forward();"
		],
		"description": "go forwards in the history stack.\n"
	},
	"this.$router.resolve(location, current?, append?)": {
		"prefix": "router-resolve",
		"body": [
			"${9:this.\\$}router.resolve(${3:this.to}, ${4:this.\\$route}, ${5:this.append});"
		],
		"description": "Given location in form same as used in `<router-link/>`.\n"
	},
	"this.$router.getMatchedComponents": {
		"prefix": "router-getMatchedComponents",
		"body": [
			"const components = this.\\$router.getMatchedComponents()"
		]
	},
	"this.$router.addRoute": {
		"prefix": "router-addRoute",
		"body": [
			"${9:this.\\$}router.addRoute(${1:route});"
		]
	},
	"this.$router.getRoutes": {
		"prefix": "router-getRoutes",
		"body": [
			"const ${1:routes} = ${9:this.\\$}router.getRoutes();"
		]
	},
	"this.$router.onReady": {
		"prefix": "router-onReady",
		"body": [
			"${9:this.\\$}router.onReady(${1:callback}${2:, errorCallback});"
		]
	},
	"this.$router.onError": {
		"prefix": "router-onError",
		"body": [
			"${9:this.\\$}router.onError(${1:callback});"
		]
	}
}
