{
	"import vue-router": {
		"prefix": "import-vue-router",
		"body": [
			"import VueRouter from 'vue-router';$0"
		],
		"description": "import Vue Router\n"
	},
	"new VueRouter()": {
		"prefix": "newVueRouter",
		"body": [
			"Vue.use(VueRouter);",
			"",
			"const ${1:router} = new VueRouter({",
			"  mode: 'history',",
			"  ${2:routes}",
			"});$0"
		],
		"description": "Create the router instance, The default is hash mode.\nRouter Construction Options:\n- routes: Array<RouteConfig>,\n- mode: 'hash' | 'history' | 'abstract' (Node.js),\n- base: '/',\n"
	},
	"routes: Array<RouteConfig>": {
		"prefix": "routes",
		"body": [
			"const ${1:routes} = [",
			"  {",
			"    path: '${2:/pathname}',",
			"    component: ${3:Feature},",
			"  },",
			"  {",
			"    path: '${4:/pathname}',",
			"    component: ${5:Feature},",
			"    children: [",
			"      {",
			"        path: '${6:/pathname}',",
			"        component: ${7:Feature},",
			"      },",
			"    ],",
			"  },",
			"];"
		],
		"description": "Define routes\n"
	},
	"Define route, { path, component }": {
		"prefix": "route",
		"body": [
			"{",
			"  path: '${1:pathname}',",
			"  component: ${3:Feature},",
			"},"
		],
		"description": "Define route\n"
	},
	"Define route, { path, name, component }": {
		"prefix": "route-name",
		"body": [
			"{",
			"  path: '${1:/pathname}',",
			"  name: '${2:routeName}',",
			"  component: ${3:Feature},",
			"},"
		],
		"description": "Define named route\n"
	},
	"Define route, { path, component }, Named Views": {
		"prefix": "route-named-views",
		"body": [
			"{",
			"  path: '${1:/pathname}',",
			"  components: {",
			"    default: ${2:Feature},",
			"    view${3:Name}: ${3},",
			"  },",
			"},"
		]
	},
	"Define route, { path, component, alias }": {
		"prefix": "route-alias",
		"body": [
			"{",
			"  path: '${1:/feature}',",
			"  component: ${2:Feature},",
			"  alias: '{3:/feature}',",
			"},"
		],
		"description": "Define alias route\n"
	},
	"Define route, { path, redirect }": {
		"prefix": "route-redirect",
		"body": [
			"{",
			"  path: '${1:/pathname}',",
			"  redirect: '${2:/otherPathname},'",
			"},"
		],
		"description": "Define redirect route\nExample:\n// relative redirect to a sibling route\n`{ path: 'relative-redirect', redirect: 'feature' }`\n// absolute redirect\n`{ path: '/absolute-redirect', redirect: '/feature' },`\n// named redirect\n`{ path: '/named-redirect', redirect: { name: 'feature' }},`\n// redirect with params\n`{ path: '/redirect-with-params/:id', redirect: '/with-params/:id' },`\n"
	},
	"Define route, { path, redirect: { name } }": {
		"prefix": "route-redirect-name",
		"body": [
			"{",
			"  path: '${1:/feature/:id}',",
			"  redirect: {",
			"    name: '${2:routeName}',",
			"  },",
			"},"
		],
		"description": "Define redirect route\n"
	},
	"Define route, { path, redirect }, Dynamic": {
		"prefix": "route-redirect-dynamic",
		"body": [
			"{",
			"  path: '/dynamic-redirect/:id?',",
			"  redirect: (to) => {",
			"    const { hash, params, query } = to;",
			"    if (query.property === 'value') {",
			"      return { path: '/pathname', query: null };",
			"    }",
			"    if (hash === '#feature') {",
			"      return { name: 'routeName', hash: '' };",
			"    }",
			"    if (params.id) {",
			"      return '/with-params/:id';",
			"    } else {",
			"      return '/feature';",
			"    }",
			"  },",
			"},"
		],
		"description": "Define dynamic redirect\n"
	},
	"Define route, Lazy Loading Routes": {
		"prefix": "route-lazy",
		"body": [
			"// const Feature = () => import('./Feature.vue')",
			"{",
			"  path: '${1:pathname}',",
			"  name: '${2:routeName}',",
			"  // component: () => import('./Feature.vue'),",
			"  component: ${3:Feature},",
			"},"
		],
		"description": "Define lazy loading route\n"
	},
	"Define route, Passing Props: Boolean mode": {
		"prefix": "route-props-boolean",
		"body": [
			"{",
			"  path: '${1:/feature}',",
			"  component: ${2:Feature},",
			"  props: true,",
			"},$0"
		],
		"description": "Passing Props to Route Components.\nWhen `props` is set to `true`, the `route.params` will be set as the component props.\n"
	},
	"Define route, Passing Props: Object mode": {
		"prefix": "route-props-object",
		"body": [
			"{",
			"  path: '${1:/feature}',",
			"  component: ${2:Feature},",
			"  props: { ${3:property}: '${4:value}' },",
			"},$0"
		],
		"description": "Passing Props to Route Components\n"
	},
	"Define route, Passing Props: Function mode": {
		"prefix": "route-props-function",
		"body": [
			"{",
			"  path: '${1:/feature}',",
			"  component: ${2:Feature},",
			"  props: (route) => ($3{",
			"    property: route.params.property,",
			"    key: route.query.key,",
			"  }),",
			"},$0"
		],
		"description": "Passing Props to Route Components\n"
	},
	"Define route, Passing Props: Function mode, named views": {
		"prefix": "route-props-function-named-views",
		"body": [
			"{",
			"  path: '${1:/feature}',",
			"  component: ${2:Feature},",
			"  props: {",
			"    default: ${3:true},",
			"    ${4:viewName}: (route) => ($5{",
			"      property: route.params.property,",
			"    }),",
			"  },",
			"},$0"
		],
		"description": "Passing Props to Route Components\n"
	},
	"route: beforeEnter(to, from, next)": {
		"prefix": "route-beforeEnter",
		"body": [
			"beforeEnter (to, from, next) {",
			"  $1/* must call `next` */",
			"},"
		],
		"description": "Per-Route Guard.\n路由独享的守卫。\n"
	},
	"Options API: beforeRouteEnter(to, from, next)": {
		"prefix": "option-beforeRouteEnter()",
		"body": [
			"beforeRouteEnter(to, from, next) {",
			"  next((vm) => {$0});",
			"},",
			""
		],
		"description": "In-Component Guards.\n"
	},
	"Options API: beforeRouteUpdate(to, from, next)": {
		"prefix": "option-beforeRouteUpdate()",
		"body": [
			"beforeRouteUpdate(to, from, next) {",
			"  ",
			"},",
			""
		],
		"description": "In-Component Guards.\n"
	},
	"Options API: beforeRouteLeave(to, from, next)": {
		"prefix": "option-beforeRouteLeave()",
		"body": [
			"beforeRouteLeave(to, from, next) {",
			"  if (true) {",
			"    next();",
			"  } else {",
			"    next(false);",
			"  }",
			"},",
			""
		],
		"description": "In-Component Guards.\n"
	},
	"In-Component Guards (Leave Confirm)": {
		"prefix": "option-route-leave-confirm",
		"body": [
			"beforeRouteEnter(to, from, next) {",
			"  next((vm) => {$0});",
			"},",
			"beforeRouteUpdate(to, from, next) {",
			"  // this.name = to.params.name;",
			"  next();",
			"},",
			"beforeRouteLeave(to, from, next) {",
			"  const answer = window.confirm(",
			"    'Do you really want to leave? you have unsaved changes!'",
			"  );",
			"  if (answer) {",
			"    next();",
			"  } else {",
			"    next(false);",
			"  }",
			"},"
		]
	},
	"Lazy Loading Routes": {
		"prefix": "lazy-route",
		"body": [
			"const ${1} = () => import('@/${2:features}/${1:Feature}.vue');$0"
		],
		"description": "Define an async component that will be automatically code-split by webpack.\n定义一个能够被 Webpack 自动代码分割的异步组件。\n"
	},
	"Lazy Loading Routes, Grouping Components in the Same Chunk": {
		"prefix": "lazy-route-chunk",
		"body": [
			"const ${1:Feature1} = () => import(/* webpackChunkName: \"${3:feature}\" */ '${4:.}/${1}.vue');",
			"const ${2:Feature2} = () => import(/* webpackChunkName: \"${3}\" */ '${5:.}/${2}.vue');"
		],
		"description": "Group all the components nested under the same route into the same async chunk.\n把某个路由下的所有组件都打包在同个异步块 (chunk) 中。只需要使用 命名 chunk (opens new window)，一个特殊的注释语法来提供 chunk name (需要 Webpack > 2.4)。\n"
	}
}
