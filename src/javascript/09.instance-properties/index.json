{
	"Vue this.$data": {
		"prefix": "vm-$data",
		"body": [
			"${9:this}.\\$data$0"
		],
		"description": "Type: `Object`.\nThe data object that the Vue instance is observing. The Vue instance proxies access to the properties on its data object.\n"
	},
	"Vue this.$props": {
		"prefix": "vm-$props",
		"body": [
			"${9:this}.\\$props$0"
		],
		"description": "Type: `Object`.\nAn object representing the current props a component has received. The Vue instance proxies access to the properties on its props object.\n"
	},
	"Vue this.$el": {
		"prefix": "vm-$el",
		"body": [
			"${9:this}.\\$el$0"
		],
		"description": "Type: `Element`.\nThe root DOM element that the Vue instance is managing.\n"
	},
	"Vue this.$options": {
		"prefix": "vm-$options",
		"body": [
			"${9:this}.\\$options$0"
		],
		"description": "Type: `Object`.\nThe instantiation options used for the current Vue instance. This is useful when you want to include custom properties in the options.\n"
	},
	"Vue this.$parent": {
		"prefix": "vm-$parent",
		"body": [
			"${9:this}.\\$parent$0"
		],
		"description": "Type: `Vue instance`.\nThe parent instance, if the current instance has one.\nSpecify the parent instance for the instance to be created. Establishes a parent-child relationship between the two. The parent will be accessible as `this.$parent` for the child, and the child will be pushed into the parent’s `$children` array.\nUse `$parent` and `$children` sparingly - they mostly serve as an escape-hatch. Prefer using props and events for parent-child communication.\n"
	},
	"Vue this.$root": {
		"prefix": "vm-$root",
		"body": [
			"${9:this}.\\$root$0"
		],
		"description": "Type: `Vue instance`.\nThe root Vue instance of the current component tree. If the current instance has no parents this value will be itself.\n"
	},
	"Vue this.$children": {
		"prefix": "vm-$children_UNSAFE",
		"body": [
			"${9:this}.\\$children$0"
		],
		"description": "Type: `Array<Vue instance>`.\nThe direct child components of the current instance. Note there’s no order guarantee for `$children`, and it is not reactive. If you find yourself trying to use `$children` for data binding, consider using an Array and `v-for` to generate child components, and use the Array as the source of truth.\nVue 3.x removed.\n"
	},
	"Vue this.$slots": {
		"prefix": "vm-$slots",
		"body": [
			"${9:this}.\\$slots$0"
		],
		"description": "Type: `{[name: string]: ?Array<VNode>}`\nReactive? No\nUsed to programmatically access content distributed by slots. Each named slot has its own corresponding property (e.g. the contents of `v-slot:foo` will be found at `vm.$slots.foo`). The `default` property contains either nodes not included in a named slot or contents of `v-slot:default`.\n Please note that slots are not reactive. If you need a component to re-render based on changes to data passed to a slot, we suggest considering a different strategy that relies on a reactive instance option, such as `props` or `data`.\n Note: `v-slot:foo` is supported in v2.6+. For older versions, you can use the deprecated syntax.\n Accessing `vm.$slots` is most useful when writing a component with a `render(createElement)` function.\n"
	},
	"Vue this.$scopedSlots": {
		"prefix": "vm-$scopedSlots_UNSAFE",
		"body": [
			"${9:this}.\\$scopedSlots$0"
		],
		"description": "Type: `{[name: string]: props => Array<VNode> | undefined}`.\nUsed to programmatically access scoped slots. For each slot, including the `default` one, the object contains a corresponding function that returns VNodes.\n Accessing `vm.$scopedSlots` is most useful when writing a component with a `render(createElement)` function.\n Note: since 2.6.0+, there are two notable changes to this property:\n 1. Scoped slot functions are now guaranteed to return an array of VNodes, unless the return value is invalid, in which case the function will return `undefined`.\n 2. All `$slots` are now also exposed on `$scopedSlots` as functions. If you work with render functions, it is now recommended to always access slots via `$scopedSlots`, whether they currently use a scope or not. This will not only make future refactors to add a scope simpler, but also ease your eventual migration to Vue 3, where all slots will be functions.\n2.x Syntax: `this.$scopedSlots.header`\n3.x Syntax: `this.$slots.header()`\nVue 3.x removed. (unified into the `$slots` option)\n"
	},
	"Vue this.$refs": {
		"prefix": [
			"this.$refs",
			"rs"
		],
		"body": [
			"${9:this}.\\$refs.${1:name}"
		],
		"description": "Type: `Object`.\nAn object of DOM elements and component instances, registered with `ref` attributes.\n"
	},
	"Vue this.$isServer": {
		"prefix": "vm-$isServer",
		"body": [
			"${9:this}.\\$isServer$0"
		],
		"description": "Type: `boolean`.\nWhether the current Vue instance is running on the server.\n"
	},
	"Vue this.$attrs": {
		"prefix": "vm-$attrs",
		"body": [
			"${9:this}.\\$attrs$0"
		],
		"description": "Type: `{[key: string]: string}`.\nContains parent-scope attribute bindings (except for `class` and `style`) that are not recognized (and extracted) as props. When a component doesn’t have any declared props, this essentially contains all parent-scope bindings (except for `class` and `style`), and can be passed down to an inner component via `v-bind=\"$attrs\"` - useful when creating higher-order components.\n"
	},
	"Vue this.$listeners": {
		"prefix": "vm-$listeners_UNSAFE",
		"body": [
			"${9:this}.\\$listeners$0"
		],
		"description": "Type: `{[key: string]: Function | Array<Function>}`.\nContains parent-scope `v-on` event listeners (without `.native` modifiers). This can be passed down to an inner component via `v-on=\"$listeners\"` - useful when creating transparent wrapper components.\nVue 3.x removed. (merged into $attrs)\n"
	}
}
