{
	"el": {
		"prefix": "option.el",
		"body": ["el: '#${1:root}',$0"],
		"description": "Type: `string | Element`.\nRestriction: only respected in instance creation via `new`.\nProvide the Vue instance an existing DOM element to mount on. It can be a CSS selector string or an actual HTMLElement.\nAfter the instance is mounted, the resolved element will be accessible as `vm.$el`.\nIf this option is available at instantiation, the instance will immediately enter compilation; otherwise, the user will have to explicitly call `vm.$mount()` to manually start the compilation."
	},
	"template": {
		"prefix": "option.template",
		"body": ["template: '${1:#${2:feature}-template}',$0"],
		"description": "Type: `string`.\nA string template to be used as the markup for the Vue instance. The template will replace the mounted element. Any existing markup inside the mounted element will be ignored, unless content distribution slots are present in the template.\nIf the string starts with `#` it will be used as a querySelector and use the selected element’s innerHTML as the template string. This allows the use of the common `<script type=\"x-template\"> `trick to include templates.\nFrom a security perspective, you should only use Vue templates that you can trust. Never use user-generated content as your template.\nIf `render` function is present in the Vue option, the template will be ignored."
	},
	"render(h, context)": {
		"prefix": "option.render",
		"body": [
			"render(createElement, context) {",
			"\treturn createElement('${1:tag}', ${2:[$3]});",
			"},$0"
		],
		"description": "Type: `(createElement: () => VNode) => VNode`.\nAn alternative to string templates allowing you to leverage the full programmatic power of JavaScript. The render function receives a `createElement` method as it’s first argument used to create `VNodes`.\nIf the component is a functional component, the render function also receives an extra argument `context`, which provides access to contextual data since functional components are instance-less.\nThe render function has priority over the `render` function compiled from `template` option or in-DOM HTML template of the mounting element which is specified by the `el` option."
	},
	"renderError(h, err)": {
		"prefix": "option.renderError",
		"body": [
			"renderError(h, err) {",
			"\treturn h('pre', { style: { color: 'red' } }, err.stack);",
			"},$0"
		],
		"description": "Type: `(createElement: () => VNode, error: Error) => VNode`.\nOnly works in development mode.\nProvide an alternative render output when the default `render` function encounters an error. The error will be passed to `renderError` as the second argument. This is particularly useful when used together with hot-reload."
	}
}
