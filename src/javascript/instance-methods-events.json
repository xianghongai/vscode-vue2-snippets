{
	"this.$on()": {
		"prefix": "this.$on()_UNSAFE",
		"body": [
			"this.\\$on('${1:event-name}', function (${2:param}) {",
			"  $3",
			"});$0"
		],
		"description": "Removed from Vue 3.0!\nListen for a custom event on the current vm. Events can be triggered by vm.$emit. The callback will receive all the additional arguments passed into these event-triggering methods.\n `vm.$on(event, callback)`"
	},
	"this.$emit()": {
		"prefix": ["this.$emit()", "emit"],
		"body": [
			"this.\\$emit('${1:event-name}'${2:, ${3:param}});$0"
		],
		"description": "Trigger an event on the current instance. Any additional arguments will be passed into the listener’s callback function.\n `vm.$emit(eventName, […args])`"
	},
	"this.$once()": {
		"prefix": "this.$once()_UNSAFE",
		"body": [
			"this.\\$once('${1:event-name}', function () {",
			"  $2",
			"});$0"
		],
		"description": "Removed from Vue 3.0!\nListen for a custom event, but only once. The listener will be removed once it triggers for the first time.\n `vm.$once(event, callback)`"
	},
	"this.$off()": {
		"prefix": ["this.$off()_UNSAFE", "off"],
		"body": ["this.\\$off($1);$0"],
		"description": "Removed from Vue 3.0!\nRemove custom event listener(s).\n 1. If no arguments are provided, remove all event listeners;\n 2. If only the event is provided, remove all listeners for that event;\n 3. If both event and callback are given, remove the listener for that specific callback only.\n `vm.$off([event, callback])`"
	}
}
