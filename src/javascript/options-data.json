{
	"Vue Option Data - props": {
		"prefix": ["option.props", "op", "ops"],
		"body": ["props: {", "\t$1", "},$0"],
		"description": "Type: Array<string> | Object\n"
	},
	"Vue Option Data - propsData": {
		"prefix": "option.propsData",
		"body": ["propsData: {", "\t${1:property}: ${2:'${3:value}'},$4", "},$0"],
		"description": "Type: Object.\nonly respected in instance creation via `new`.\nPass props to an instance during its creation. This is primarily intended to make unit testing easier.\n"
	},
	"Vue Option Data - data()": {
		"prefix": ["option.data()", "od", "data"],
		"body": [
			"data() {",
			"\treturn {",
			"\t\t${1:property}: ${2:'${3:value}'},$4",
			"\t};",
			"},$0"
		],
		"description": "Type: Object | Function\n"
	},
	"Vue Option Data - computed": {
		"prefix": ["option.computed", "ocd"],
		"body": [
			"computed: {",
			"\t${1:property}() {",
			"\t\treturn this.${2:property};",
			"\t},",
			"",
			"},"
		],
		"description": "Type: { [key: string]: Function | { get: Function, set: Function } }\nComputed properties to be mixed into the Vue instance. All getters and setters have their this context automatically bound to the Vue instance.\nNote that if you use an arrow function with a computed property, `this` won’t be the component’s instance, but you can still access the instance as the function’s first argument.\n"
	},
	"Vue Option Data - computed property": {
		"prefix": ["option.computedProperty", "cp"],
		"body": [
			"${1:property}() {",
			"\treturn this.${2:property};",
			"},",
			""
		]
	},
	"Vue Option Data - computed property (get/set)": {
		"prefix": ["option.computedProperty", "cpgs"],
		"body": [
			"${3:property}: {",
			"\tget() {",
			"\t\treturn this.${4:value};",
			"\t},",
			"\tset(${5:val}) {",
			"\t\tthis.${4:value} = $5;",
			"\t},",
			"},$0"
		]
	},
	"Vue Option Data - methods": {
		"prefix": ["option.methods", "oms"],
		"body": ["methods: {", "\t${1:methodName}($2) {", "\t\t$3", "\t},$0", "},"],
		"description": "Type: { [key: string]: Function }\n"
	},
	"Vue Option Data - watch": {
		"prefix": ["option.watch", "ow"],
		"body": [
			"watch: {",
			"\t${1:propertyName}(newValue, oldValue) {",
			"\t\t$2",
			"\t},$0",
			"},"
		],
		"description": "Type: { [key: string]: String | Function | Object | Array}\nString: methodName,\nFunction: handler(val, oldVal),\nObject: {handler(val, oldVal): Function, deep: Boolean, immediate: Boolean},\nArray: [String, Object, Function]\nAn object where keys are expressions to watch and values are the corresponding callbacks. The value can also be a string of a method name, or an Object that contains additional options. The Vue instance will call `$watch()` for each entry in the object at instantiation.\n"
	},
	"Vue Option Data - watch property": {
		"prefix": ["option.watchProperty", "wp"],
		"body": ["${1:propertyName}(newValue, oldValue) {", "\t$2", "},$0"]
	},
	"Vue Option Data - watch property (deep)": {
		"prefix": ["option.watchPropertyDeep", "wpd"],
		"body": [
			"${1:propertyName}: {",
			"\tdeep: true,",
			"\thandler(newValue, oldValue) {",
			"\t\t$2",
			"\t},",
			"},$0"
		]
	},
	"Vue Option Data - watch property (immediate)": {
		"prefix": ["option.watchPropertyImmediate", "wpi"],
		"body": [
			"${1:propertyName}: {",
			"\timmediate: true,",
			"\thandler(newValue, oldValue) {",
			"\t\t$2",
			"\t},",
			"},$0"
		]
	},
	"Vue Option Data - watch property (deep, immediate)": {
		"prefix": ["option.watchPropertyDeepImmediate", "wpdi", "wpid"],
		"body": [
			"${1:propertyName}: {",
			"\tdeep: true,",
			"\timmediate: true,",
			"\thandler(newValue, oldValue) {",
			"\t\t$2",
			"\t},",
			"},$0"
		]
	}
}
