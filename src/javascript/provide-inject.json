{
	"option.provide": {
		"prefix": "option.provide",
		"body": [
			"provide() {",
			"\treturn {",
			"\t\t${1:property}: ${2:'value'},",
			"\t}",
			"},$0"
		],
		"description": "Type: `Object | () => Object`.\nThe `provide` option should be an object or a function that returns an object. This object contains the properties that are available for injection into its descendants. You can use ES2015 Symbols as keys in this object, but only in environments that natively support `Symbol` and `Reflect.ownKeys`.\nNote: the `provide` and `inject` bindings are NOT reactive. This is intentional. However, if you pass down an observed object, properties on that object do remain reactive.\n\n`provide` and `inject` are primarily provided for advanced plugin / component library use cases. It is NOT recommended to use them in generic application code."
	},
	"option.inject": {
		"prefix": "option.inject",
		"body": ["inject: ['${1:property}'],$0"],
		"description": "Type: Array<string> | `{[key: string]: string | Symbol | Object}`.\nThe inject option should be either:\n- an array of strings, or\n- an object where the keys are the local binding name and the value is either:\n\t\t- the key (string or Symbol) to search for in available injections, or\n\t\t- an object where:\n\t\t\t\t- the from property is the key (string or Symbol) to search for in available injections, and\n\t\t\t\t- the default property is used as fallback value\nNote: the `provide` and `inject` bindings are NOT reactive. This is intentional. However, if you pass down an observed object, properties on that object do remain reactive.\n\n`provide` and `inject` are primarily provided for advanced plugin / component library use cases. It is NOT recommended to use them in generic application code."
	}
}
