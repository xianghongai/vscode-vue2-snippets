{
	"Vue Directives (Globally, Directive Hooks)": {
		"prefix": [
			"Vue.directive()",
			"vgd"
		],
		"body": [
			"Vue.directive('${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}}', {",
			"  ${2:bind(el, binding, vnode) {$3\\},}",
			"  ${4:inserted(el, binding, vnode) {$5\\},}",
			"  ${6:update(el, binding, vnode, oldVnode) {$7\\},}",
			"  ${8:componentUpdated(el, binding, vnode) {$9\\},}",
			"  ${10:unbind(el, binding, vnode) {$11\\},}",
			"});$0"
		],
		"description": "Register a global directive [Custom Directives](https://v2.vuejs.org/v2/guide/custom-directive)\nVue 3.x DEPRECATED. (3.x Instance API: `app.directive`)\n"
	},
	"Vue Directives (Globally, Function Shorthand)": {
		"prefix": [
			"Vue.directive()",
			"vgd"
		],
		"body": [
			"Vue.directive('${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}}', function (el, binding, vnode) {",
			"  ${2:// `bind`, `update`}",
			"  $0",
			"});"
		],
		"description": "Register a global directive.\nThis will be called as `bind` and `update`.\nVue 3.x DEPRECATED. (3.x Instance API: `app.directive`)\n"
	},
	"Vue Directives (Single-File, Directive Hooks)": {
		"prefix": [
			"vue-directive",
			"vd"
		],
		"body": [
			"export default {",
			"  name: '${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}}',",
			"  ${2:bind(el, binding, vnode) {$3\\},}",
			"  ${4:inserted(el, binding, vnode) {${5:vnode.context.\\$nextTick(() => {\\});}\\},}",
			"  ${6:update(el, binding, vnode, oldVnode) {$7\\},}",
			"  ${8:componentUpdated(el, binding, vnode, oldVnode) {$9\\},}",
			"  ${10:unbind(el, binding, vnode) {$11\\},}",
			"};$0"
		],
		"description": "define an object that contains several lifecycle hooks (all optional).\nGlobally: `Vue.directive('directive-name', directiveObject)`\n"
	},
	"Vue Directives (Locally, option)": {
		"prefix": [
			"option.directives",
			"ods"
		],
		"body": [
			"directives: {",
			"  $0",
			"},"
		],
		"description": "Define local directives in a component’s options.\nA hash of directives to be made available to the Vue instance.\n"
	},
	"Vue Directives (Locally, Directive Hooks)": {
		"prefix": [
			"dp"
		],
		"body": [
			"${1:directiveName}: {",
			"  bind(el, binding, vnode) {",
			"    $2",
			"  },",
			"  inserted(el, binding, vnode) {",
			"    $3",
			"  },",
			"  update(el, binding, vnode, oldVnode) {",
			"    $4",
			"  },",
			"  componentUpdated(el, binding, vnode, oldVnode) {",
			"    $5",
			"  },",
			"  unbind(el, binding, vnode) {",
			"    $5",
			"  },",
			"},"
		],
		"description": "directive property"
	},
	"Vue Directives (Locally, Function Shorthand)": {
		"prefix": [
			"dp"
		],
		"body": [
			"${1:directiveName}(el, binding, vnode) {",
			"  $2",
			"},$0"
		],
		"description": "directive property"
	},
	"Vue Directive Lifecycle: bind()": {
		"prefix": [
			"dlb"
		],
		"body": [
			"bind (el${2:, binding${3:, vnode}}) {",
			"  $4",
			"},$0"
		],
		"description": "Directive `bind` lifecycle.\ncalled only once, when the directive is first bound to the element. This is where you can do one-time setup work.\n"
	},
	"Vue Directive Lifecycle: inserted()": {
		"prefix": [
			"dli"
		],
		"body": [
			"inserted (el${2:, binding${3:, vnode}}) {",
			"  $4",
			"},$0"
		],
		"description": "Directive `inserted` lifecycle.\ncalled when the bound element has been inserted into its parent node (this only guarantees parent node presence, not necessarily in-document).\n"
	},
	"Vue Directive Lifecycle: update()": {
		"prefix": [
			"dlu"
		],
		"body": [
			"update (el${2:, binding${3:, vnode${4:, oldVnode}}}) {",
			"  $5",
			"},$0"
		],
		"description": "Directive `update` lifecycle.\ncalled after the containing component’s VNode has updated, but possibly before its children have updated. The directive’s value may or may not have changed, but you can skip unnecessary updates by comparing the binding’s current and old values (see below on hook arguments).\n"
	},
	"Vue Directive Lifecycle: componentUpdated()": {
		"prefix": [
			"dlcu"
		],
		"body": [
			"componentUpdated (el${2:, binding${3:, vnode${4:, oldVnode}}}) {",
			"  $5",
			"},$0"
		],
		"description": "Directive `componentUpdated` lifecycle.\ncalled after the containing component’s VNode and the VNodes of its children have updated.\n"
	},
	"Vue Directive Lifecycle: unbind()": {
		"prefix": [
			"dlun"
		],
		"body": [
			"unbind (el${2:, binding${3:, vnode}}) {",
			"  $4",
			"},$0"
		],
		"description": "Directive `unbind` lifecycle.\ncalled only once, when the directive is unbound from the element.\n"
	},
	"Vue Retrieve Global Directive": {
		"prefix": "Vue.directive()",
		"body": [
			"const ${2:feature}Directive = Vue.directive('${1:directiveName}');"
		],
		"description": "Retrieve a global directive.\nReturn the directive definition if registered.\nVue 3.x DEPRECATED. (3.x Instance API: `app.directive`)\n"
	}
}
